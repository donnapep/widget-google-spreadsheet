function handleClientJSLoad(){isClientJS=!0;var e=document.createEvent("Events");e.initEvent("gapi.loaded",!0,!0),window.dispatchEvent(e)}angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),a=function(){var a=e.preferredLanguage();angular.isString(a)?e.use(a):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](a):a():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(e){var t,n,a,i,o,r,s,l,c,u,d,p,f,m,g,h={},v=[],b=e,y=[],$=!1,w="translate-cloak",k=!1,x=".",C="2.5.2",T=function(){var e,t,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(t=n.languages[e],t&&t.length)return t;for(e=0;e<a.length;e++)if(t=n[a[e]],t&&t.length)return t;return null};T.displayName="angular-translate/service: getFirstBrowserLanguage";var D=function(){return(T()||"").split("-").join("_")};D.displayName="angular-translate/service: getLocale";var S=function(e,t){for(var n=0,a=e.length;a>n;n++)if(e[n]===t)return n;return-1},E=function(){return this.replace(/^\s+|\s+$/g,"")},O=function(e){for(var t=[],a=angular.lowercase(e),i=0,o=v.length;o>i;i++)t.push(angular.lowercase(v[i]));if(S(t,a)>-1)return e;if(n){var r;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(e);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===e.slice(0,s.length-1)),(c||l)&&(r=n[s],S(t,angular.lowercase(r))>-1))return r}}var u=e.split("_");return u.length>1&&S(t,angular.lowercase(u[0]))>-1?u[0]:e},M=function(e,t){if(!e&&!t)return h;if(e&&!t){if(angular.isString(e))return h[e]}else angular.isObject(h[e])||(h[e]={}),angular.extend(h[e],A(t));return this};this.translations=M,this.cloakClassName=function(e){return e?(w=e,this):w};var A=function(e,t,n,a){var i,o,r,s;t||(t=[]),n||(n={});for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s=e[i],angular.isObject(s)?A(s,t.concat(i),n,i):(o=t.length?""+t.join(x)+x+i:i,t.length&&i===a&&(r=""+t.join(x),n[r]="@:"+o),n[o]=s));return n};this.addInterpolation=function(e){return y.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return u=e,this},this.useSanitizeValueStrategy=function(e){return $=e,this},this.preferredLanguage=function(e){return P(e),this};var P=function(e){return e&&(t=e),t};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(f=e,this):f},this.translationNotFoundIndicatorRight=function(e){return e?(m=e,this):m},this.fallbackLanguage=function(e){return I(e),this};var I=function(e){return e?(angular.isString(e)?(i=!0,a=[e]):angular.isArray(e)&&(i=!1,a=e),angular.isString(t)&&S(a,t)<0&&a.push(t),this):i?a[0]:a};this.use=function(e){if(e){if(!h[e]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return o=e,this}return o};var L=function(e){return e?(b=e,void 0):l?l+b:b};this.storageKey=L,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return d=e,p=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(l=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return k=!!e,this},this.determinePreferredLanguage=function(e){var n=e&&angular.isFunction(e)?e():D();return t=v.length?O(n):n,this},this.registerAvailableLanguageKeys=function(e,t){return e?(v=e,t&&(n=t),this):v},this.useLoaderCache=function(e){return e===!1?g=void 0:e===!0?g=!0:"undefined"==typeof e?g="$translationCache":e&&(g=e),this},this.$get=["$log","$injector","$rootScope","$q",function(e,n,l,v){var x,T,D,F=n.get(u||"$translateDefaultInterpolation"),N=!1,U={},V={},H=function(e,n,i){if(angular.isArray(e)){var r=function(e){for(var t={},a=[],o=function(e){var a=v.defer(),o=function(n){t[e]=n,a.resolve([e,n])};return H(e,n,i).then(o,o),a.promise},r=0,s=e.length;s>r;r++)a.push(o(e[r]));return v.all(a).then(function(){return t})};return r(e)}var l=v.defer();e&&(e=E.apply(e));var c=function(){var e=t?V[t]:V[o];if(T=0,s&&!e){var n=x.get(b);if(e=V[n],a&&a.length){var i=S(a,n);T=0===i?1:0,S(a,t)<0&&a.push(t)}}return e}();return c?c.then(function(){J(e,n,i).then(l.resolve,l.reject)},l.reject):J(e,n,i).then(l.resolve,l.reject),l.promise},_=function(e){return f&&(e=[f,e].join(" ")),m&&(e=[e,m].join(" ")),e},R=function(e){o=e,l.$emit("$translateChangeSuccess",{language:e}),s&&x.put(H.storageKey(),o),F.setLocale(o),angular.forEach(U,function(e,t){U[t].setLocale(o)}),l.$emit("$translateChangeEnd",{language:e})},j=function(e){if(!e)throw"No language key specified for loading.";var t=v.defer();l.$emit("$translateLoadingStart",{language:e}),N=!0;var a=g;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:e,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(n)?angular.forEach(n,function(e){angular.extend(a,A(e))}):angular.extend(a,A(n)),N=!1,t.resolve({key:e,table:a}),l.$emit("$translateLoadingEnd",{language:e})},function(e){l.$emit("$translateLoadingError",{language:e}),t.reject(e),l.$emit("$translateLoadingEnd",{language:e})}),t.promise};if(s&&(x=n.get(s),!x.get||!x.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(F.useSanitizeValueStrategy)&&F.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(e){var a=n.get(e);a.setLocale(t||o),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),U[a.getInterpolationIdentifier()]=a});var z=function(e){var t=v.defer();return Object.prototype.hasOwnProperty.call(h,e)?t.resolve(h[e]):V[e]?V[e].then(function(e){M(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},q=function(e,t,n,a){var i=v.defer();return z(e).then(function(r){Object.prototype.hasOwnProperty.call(r,t)?(a.setLocale(e),i.resolve(a.interpolate(r[t],n)),a.setLocale(o)):i.reject()},i.reject),i.promise},B=function(e,t,n,a){var i,r=h[e];return r&&Object.prototype.hasOwnProperty.call(r,t)&&(a.setLocale(e),i=a.interpolate(r[t],n),a.setLocale(o)),i},W=function(e){if(c){var t=n.get(c)(e,o);return void 0!==t?t:e}return e},G=function(e,t,n,i){var o=v.defer();if(e<a.length){var r=a[e];q(r,t,n,i).then(o.resolve,function(){G(e+1,t,n,i).then(o.resolve)})}else o.resolve(W(t));return o.promise},Y=function(e,t,n,i){var o;if(e<a.length){var r=a[e];o=B(r,t,n,i),o||(o=Y(e+1,t,n,i))}return o},K=function(e,t,n){return G(D>0?D:T,e,t,n)},Q=function(e,t,n){return Y(D>0?D:T,e,t,n)},J=function(e,t,n){var i=v.defer(),r=o?h[o]:h,s=n?U[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,e)){var l=r[e];"@:"===l.substr(0,2)?H(l.substr(2),t,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,t))}else{var u;c&&!N&&(u=W(e)),o&&a&&a.length?K(e,t,s).then(function(e){i.resolve(e)},function(e){i.reject(_(e))}):c&&!N&&u?i.resolve(u):i.reject(_(e))}return i.promise},X=function(e,t,n){var i,r=o?h[o]:h,s=n?U[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,e)){var l=r[e];i="@:"===l.substr(0,2)?X(l.substr(2),t,n):s.interpolate(l,t)}else{var u;c&&!N&&(u=W(e)),o&&a&&a.length?(T=0,i=Q(e,t,s)):i=c&&!N&&u?u:_(e)}return i};if(H.preferredLanguage=function(e){return e&&P(e),t},H.cloakClassName=function(){return w},H.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(I(e),d&&a&&a.length)for(var t=0,n=a.length;n>t;t++)V[a[t]]||(V[a[t]]=j(a[t]));H.use(H.use())}return i?a[0]:a},H.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=S(a,e);t>-1&&(D=t)}else D=0},H.proposedLanguage=function(){return r},H.storage=function(){return x},H.use=function(e){if(!e)return o;var t=v.defer();l.$emit("$translateChangeStart",{language:e});var n=O(e);return n&&(e=n),h[e]||!d||V[e]?(t.resolve(e),R(e)):(r=e,V[e]=j(e).then(function(n){return M(n.key,n.table),t.resolve(n.key),R(n.key),r===e&&(r=void 0),n},function(e){r===e&&(r=void 0),l.$emit("$translateChangeError",{language:e}),t.reject(e),l.$emit("$translateChangeEnd",{language:e})})),t.promise},H.storageKey=function(){return L()},H.isPostCompilingEnabled=function(){return k},H.refresh=function(e){function t(){i.resolve(),l.$emit("$translateRefreshEnd",{language:e})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:e})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:e}),e)h[e]?j(e).then(function(n){M(n.key,n.table),e===o&&R(o),t()},n):n();else{var r=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)r.push(j(a[c])),s[a[c]]=!0;o&&!s[o]&&r.push(j(o)),v.all(r).then(function(e){angular.forEach(e,function(e){h[e.key]&&delete h[e.key],M(e.key,e.table)}),o&&R(o),t()})}return i.promise},H.instant=function(e,n,i){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var r={},s=0,l=e.length;l>s;s++)r[e[s]]=H.instant(e[s],n,i);return r}if(angular.isString(e)&&e.length<1)return e;e&&(e=E.apply(e));var u,d=[];t&&d.push(t),o&&d.push(o),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var m=d[p];if(h[m]&&"undefined"!=typeof h[m][e]&&(u=X(e,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=F.interpolate(e,n),c&&!N&&(u=W(e))),u},H.versionInfo=function(){return C},H.loaderCache=function(){return g},d&&(angular.equals(h,{})&&H.use(H.use()),a&&a.length))for(var Z=function(e){return M(e.key,e.table),l.$emit("$translateChangeEnd",{language:e.key}),e},et=0,tt=a.length;tt>et;et++)V[a[et]]=j(a[et]).then(Z);return H}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},a="default",i=null,o={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.element("<div></div>").text(e[n]).html());return t}},r=function(e){var t;return t=angular.isFunction(o[i])?o[i](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(e){return i=e,this},n.interpolate=function(t,n){return i&&(n=r(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,a,i,o){return{restrict:"AE",scope:!0,compile:function(t,r){var s=r.translateValues?r.translateValues:void 0,l=r.translateInterpolation?r.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,p,f){t.interpolateParams={},t.preText="",t.postText="";var m={},g=function(e){if(angular.equals(e,"")||!angular.isDefined(e)){var a=p.text().match(u);angular.isArray(a)?(t.preText=a[1],t.postText=a[3],m.translate=n(a[2])(t.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&t.$watch(watcherMatches[2],function(e){m.translate=e,$()})):m.translate=p.text().replace(/^\s+|\s+$/g,"")}else m.translate=e;$()},h=function(e){f.$observe(e,function(t){m[e]=t,$()})};f.$observe("translate",function(e){g(e)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&h(v);if(f.$observe("translateDefault",function(e){t.defaultText=e}),s&&f.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,i(e)(t.$parent))})}),c){var b=function(e){f.$observe(e,function(n){var a=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var e in m)m.hasOwnProperty(e)&&m[e]&&w(e,m[e],t,t.interpolateParams)},w=function(t,n,a,i){e(n,i,l).then(function(e){k(e,a,!0,t)},function(e){k(e,a,!1,t)})},k=function(t,n,i,o){if("translate"===o){i||"undefined"==typeof n.defaultText||(t=n.defaultText),p.html(n.preText+t+n.postText);var s=e.isPostCompilingEnabled(),l="undefined"!=typeof r.translateCompile,c=l&&"false"!==r.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(t=n.defaultText);var u=f.$attr[o].substr(15);p.attr(u,t)}};t.$watch("interpolateParams",$,!0);var x=o.$on("$translateChangeSuccess",$);p.text().length&&g(""),$(),t.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())},o=e.$on("$translateChangeEnd",function(){i(),o(),o=null});return a(),function(e,n,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(e){t(e).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,a,i){return angular.isObject(a)||(a=e(a)(this)),t.instant(n,a,i)};return n.$stateful=!0,n}]),function(){"use strict";angular.module("angularLoad",[]).service("angularLoad",["$document","$q","$timeout",function(e,t,n){function a(e){var a={};return function(i){if("undefined"==typeof a[i]){var o=t.defer(),r=e(i);r.onload=r.onreadystatechange=function(e){r.readyState&&"complete"!==r.readyState&&"loaded"!==r.readyState||n(function(){o.resolve(e)})},r.onerror=function(e){n(function(){o.reject(e)})},a[i]=o.promise}return a[i]}}var i=e[0];this.loadScript=a(function(e){var t=i.createElement("script");return t.src=e,i.body.appendChild(t),t}),this.loadCSS=a(function(e){var t=i.createElement("link");return t.rel="stylesheet",t.type="text/css",t.href=e,i.head.appendChild(t),t})}])}(),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=e.defer();return t(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(e){a.resolve(e)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){function n(e,a){t(angular.extend({url:[e.prefix,e.key.toLowerCase(),e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(e){a.resolve(e)}).error(function(){if(e.key.indexOf("_")>=0){var t=e.key.substr(0,e.key.lastIndexOf("_")),i=angular.extend({},e,{key:t});n(i,a)}else a.resolve("{}")})}return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=e.defer();return n(t,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(e,t,n){e.useStaticFilesLoader({prefix:t,suffix:n}),e.determinePreferredLanguage().fallbackLanguage("en")}]),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.affix"),o="object"==typeof t&&t;i||a.data("bs.affix",i=new n(this,o)),"string"==typeof t&&i[t]()})}var n=function(t,a){this.options=e.extend({},n.DEFAULTS,a),this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this)),this.$element=e(t),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var e=this.$target.scrollTop(),t=this.$element.offset();return this.pinnedOffset=t.top-e},n.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=e(document).height(),a=this.$target.scrollTop(),i=this.$element.offset(),o=this.options.offset,r=o.top,s=o.bottom;"object"!=typeof o&&(s=r=o),"function"==typeof r&&(r=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var l=null!=this.unpin&&a+this.unpin<=i.top?!1:null!=s&&i.top+this.$element.height()>=t-s?"bottom":null!=r&&r>=a?"top":!1;if(this.affixed!==l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=e.Event(c+".bs.affix");this.$element.trigger(u),u.isDefaultPrevented()||(this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(e.Event(c.replace("affix","affixed"))),"bottom"==l&&this.$element.offset({top:t-this.$element.height()-s}))}}};var a=e.fn.affix;e.fn.affix=t,e.fn.affix.Constructor=n,e.fn.affix.noConflict=function(){return e.fn.affix=a,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var n=e(this),a=n.data();a.offset=a.offset||{},a.offsetBottom&&(a.offset.bottom=a.offsetBottom),a.offsetTop&&(a.offset.top=a.offsetTop),t.call(n,a)})})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var n=e(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new a(this)),"string"==typeof t&&i[t].call(n)})}var n='[data-dismiss="alert"]',a=function(t){e(t).on("click",n,this.close)};a.VERSION="3.2.0",a.prototype.close=function(t){function n(){o.detach().trigger("closed.bs.alert").remove()}var a=e(this),i=a.attr("data-target");i||(i=a.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,""));var o=e(i);t&&t.preventDefault(),o.length||(o=a.hasClass("alert")?a:a.parent()),o.trigger(t=e.Event("close.bs.alert")),t.isDefaultPrevented()||(o.removeClass("in"),e.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var i=e.fn.alert;e.fn.alert=t,e.fn.alert.Constructor=a,e.fn.alert.noConflict=function(){return e.fn.alert=i,this},e(document).on("click.bs.alert.data-api",n,a.prototype.close)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.button"),o="object"==typeof t&&t;i||a.data("bs.button",i=new n(this,o)),"toggle"==t?i.toggle():t&&i.setState(t)})}var n=function(t,a){this.$element=e(t),this.options=e.extend({},n.DEFAULTS,a),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(t){var n="disabled",a=this.$element,i=a.is("input")?"val":"html",o=a.data();t+="Text",null==o.resetText&&a.data("resetText",a[i]()),a[i](null==o[t]?this.options[t]:o[t]),setTimeout(e.proxy(function(){"loadingText"==t?(this.isLoading=!0,a.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,a.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var e=!0,t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?e=!1:t.find(".active").removeClass("active")),e&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}e&&this.$element.toggleClass("active")};var a=e.fn.button;e.fn.button=t,e.fn.button.Constructor=n,e.fn.button.noConflict=function(){return e.fn.button=a,this},e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var a=e(n.target);a.hasClass("btn")||(a=a.closest(".btn")),t.call(a,"toggle"),n.preventDefault()})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.carousel"),o=e.extend({},n.DEFAULTS,a.data(),"object"==typeof t&&t),r="string"==typeof t?t:o.slide;i||a.data("bs.carousel",i=new n(this,o)),"number"==typeof t?i.to(t):r?i[r]():o.interval&&i.pause().cycle()})}var n=function(t,n){this.$element=e(t).on("keydown.bs.carousel",e.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(e){switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()},n.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(e){return this.$items=e.parent().children(".item"),this.$items.index(e||this.$active)},n.prototype.to=function(t){var n=this,a=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(t)}):a==t?this.pause().cycle():this.slide(t>a?"next":"prev",e(this.$items[t]))},n.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(t,n){var a=this.$element.find(".item.active"),i=n||a[t](),o=this.interval,r="next"==t?"left":"right",s="next"==t?"first":"last",l=this;if(!i.length){if(!this.options.wrap)return;i=this.$element.find(".item")[s]()}if(i.hasClass("active"))return this.sliding=!1;var c=i[0],u=e.Event("slide.bs.carousel",{relatedTarget:c,direction:r});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=e(this.$indicators.children()[this.getItemIndex(i)]);d&&d.addClass("active")}var p=e.Event("slid.bs.carousel",{relatedTarget:c,direction:r});return e.support.transition&&this.$element.hasClass("slide")?(i.addClass(t),i[0].offsetWidth,a.addClass(r),i.addClass(r),a.one("bsTransitionEnd",function(){i.removeClass([t,r].join(" ")).addClass("active"),a.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(1e3*a.css("transition-duration").slice(0,-1))):(a.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(p)),o&&this.cycle(),this}};var a=e.fn.carousel;e.fn.carousel=t,e.fn.carousel.Constructor=n,e.fn.carousel.noConflict=function(){return e.fn.carousel=a,this},e(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var a,i=e(this),o=e(i.attr("data-target")||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=e.extend({},o.data(),i.data()),s=i.attr("data-slide-to");s&&(r.interval=!1),t.call(o,r),s&&o.data("bs.carousel").to(s),n.preventDefault()}}),e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var n=e(this);t.call(n,n.data())})})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.collapse"),o=e.extend({},n.DEFAULTS,a.data(),"object"==typeof t&&t);!i&&o.toggle&&"show"==t&&(t=!t),i||a.data("bs.collapse",i=new n(this,o)),"string"==typeof t&&i[t]()})}var n=function(t,a){this.$element=e(t),this.options=e.extend({},n.DEFAULTS,a),this.transitioning=null,this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=e.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var a=this.$parent&&this.$parent.find("> .panel > .in");if(a&&a.length){var i=a.data("bs.collapse");if(i&&i.transitioning)return;t.call(a,"hide"),i||a.data("bs.collapse",null)}var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return r.call(this);var s=e.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",e.proxy(r,this)).emulateTransitionEnd(350)[o](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=e.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var a=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return e.support.transition?(this.$element[n](0).one("bsTransitionEnd",e.proxy(a,this)).emulateTransitionEnd(350),void 0):a.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var a=e.fn.collapse;e.fn.collapse=t,e.fn.collapse.Constructor=n,e.fn.collapse.noConflict=function(){return e.fn.collapse=a,this},e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var a,i=e(this),o=i.attr("data-target")||n.preventDefault()||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""),r=e(o),s=r.data("bs.collapse"),l=s?"toggle":i.data(),c=i.attr("data-parent"),u=c&&e(c);s&&s.transitioning||(u&&u.find('[data-toggle="collapse"][data-parent="'+c+'"]').not(i).addClass("collapsed"),i[r.hasClass("in")?"addClass":"removeClass"]("collapsed")),t.call(r,l)})}(jQuery),+function(e){"use strict";function t(t){t&&3===t.which||(e(i).remove(),e(o).each(function(){var a=n(e(this)),i={relatedTarget:this};a.hasClass("open")&&(a.trigger(t=e.Event("hide.bs.dropdown",i)),t.isDefaultPrevented()||a.removeClass("open").trigger("hidden.bs.dropdown",i))}))}function n(t){var n=t.attr("data-target");n||(n=t.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var a=n&&e(n);return a&&a.length?a:t.parent()}function a(t){return this.each(function(){var n=e(this),a=n.data("bs.dropdown");a||n.data("bs.dropdown",a=new r(this)),"string"==typeof t&&a[t].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(t){e(t).on("click.bs.dropdown",this.toggle)};r.VERSION="3.2.0",r.prototype.toggle=function(a){var i=e(this);if(!i.is(".disabled, :disabled")){var o=n(i),r=o.hasClass("open");if(t(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&e('<div class="dropdown-backdrop"/>').insertAfter(e(this)).on("click",t);var s={relatedTarget:this};if(o.trigger(a=e.Event("show.bs.dropdown",s)),a.isDefaultPrevented())return;i.trigger("focus"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},r.prototype.keydown=function(t){if(/(38|40|27)/.test(t.keyCode)){var a=e(this);if(t.preventDefault(),t.stopPropagation(),!a.is(".disabled, :disabled")){var i=n(a),r=i.hasClass("open");if(!r||r&&27==t.keyCode)return 27==t.which&&i.find(o).trigger("focus"),a.trigger("click");var s=" li:not(.divider):visible a",l=i.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(l.filter(":focus"));38==t.keyCode&&c>0&&c--,40==t.keyCode&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=e.fn.dropdown;e.fn.dropdown=a,e.fn.dropdown.Constructor=r,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.bs.dropdown.data-api",t).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o+', [role="menu"], [role="listbox"]',r.prototype.keydown)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.tab");i||a.data("bs.tab",i=new n(this)),"string"==typeof t&&i[t]()})}var n=function(t){this.element=e(t)};n.VERSION="3.2.0",n.prototype.show=function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),a=t.data("target");if(a||(a=t.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var i=n.find(".active:last a")[0],o=e.Event("show.bs.tab",{relatedTarget:i});if(t.trigger(o),!o.isDefaultPrevented()){var r=e(a);this.activate(t.closest("li"),n),this.activate(r,r.parent(),function(){t.trigger({type:"shown.bs.tab",relatedTarget:i})})}}},n.prototype.activate=function(t,n,a){function i(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),r?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),a&&a()}var o=n.find("> .active"),r=a&&e.support.transition&&o.hasClass("fade");r?o.one("bsTransitionEnd",i).emulateTransitionEnd(150):i(),o.removeClass("in")};var a=e.fn.tab;e.fn.tab=t,e.fn.tab.Constructor=n,e.fn.tab.noConflict=function(){return e.fn.tab=a,this},e(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),t.call(e(this),"show")})}(jQuery),+function(e){"use strict";function t(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in t)if(void 0!==e.style[n])return{end:t[n]};return!1}e.fn.emulateTransitionEnd=function(t){var n=!1,a=this;e(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||e(a).trigger(e.support.transition.end)};return setTimeout(i,t),this},e(function(){e.support.transition=t(),e.support.transition&&(e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){return e(t.target).is(this)?t.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(e){"use strict";function t(n,a){var i=e.proxy(this.process,this);this.$body=e("body"),this.$scrollElement=e(n).is("body")?e(window):e(n),this.options=e.extend({},t.DEFAULTS,a),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i),this.refresh(),this.process()}function n(n){return this.each(function(){var a=e(this),i=a.data("bs.scrollspy"),o="object"==typeof n&&n;i||a.data("bs.scrollspy",i=new t(this,o)),"string"==typeof n&&i[n]()})}t.VERSION="3.2.0",t.DEFAULTS={offset:10},t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},t.prototype.refresh=function(){var t="offset",n=0;e.isWindow(this.$scrollElement[0])||(t="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var a=this;this.$body.find(this.selector).map(function(){var a=e(this),i=a.data("target")||a.attr("href"),o=/^#./.test(i)&&e(i);
return o&&o.length&&o.is(":visible")&&[[o[t]().top+n,i]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){a.offsets.push(this[0]),a.targets.push(this[1])})},t.prototype.process=function(){var e,t=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),t>=a)return r!=(e=o[o.length-1])&&this.activate(e);if(r&&t<=i[0])return r!=(e=o[0])&&this.activate(e);for(e=i.length;e--;)r!=o[e]&&t>=i[e]&&(!i[e+1]||t<=i[e+1])&&this.activate(o[e])},t.prototype.activate=function(t){this.activeTarget=t,e(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',a=e(n).parents("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active")),a.trigger("activate.bs.scrollspy")};var a=e.fn.scrollspy;e.fn.scrollspy=n,e.fn.scrollspy.Constructor=t,e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=a,this},e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery),+function(e){"use strict";function t(t,a){return this.each(function(){var i=e(this),o=i.data("bs.modal"),r=e.extend({},n.DEFAULTS,i.data(),"object"==typeof t&&t);o||i.data("bs.modal",o=new n(this,r)),"string"==typeof t?o[t](a):r.show&&o.show(a)})}var n=function(t,n){this.options=n,this.$body=e(document.body),this.$element=e(t),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},n.prototype.show=function(t){var n=this,a=e.Event("show.bs.modal",{relatedTarget:t});this.$element.trigger(a),this.isShown||a.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.backdrop(function(){var a=e.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),a&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var i=e.Event("shown.bs.modal",{relatedTarget:t});a?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(i)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(i)}))},n.prototype.hide=function(t){t&&t.preventDefault(),t=e.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(t){var n=this,a=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&a;if(this.$backdrop=e('<div class="modal-backdrop '+a+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;i?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(150):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){n.removeBackdrop(),t&&t()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(150):o()}else t&&t()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",e+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var t=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),t};var a=e.fn.modal;e.fn.modal=t,e.fn.modal.Constructor=n,e.fn.modal.noConflict=function(){return e.fn.modal=a,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var a=e(this),i=a.attr("href"),o=e(a.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(i)&&i},o.data(),a.data());a.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(e){e.isDefaultPrevented()||o.one("hidden.bs.modal",function(){a.is(":visible")&&a.trigger("focus")})}),t.call(o,r,this)})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.tooltip"),o="object"==typeof t&&t;(i||"destroy"!=t)&&(i||a.data("bs.tooltip",i=new n(this,o)),"string"==typeof t&&i[t]())})}var n=function(e,t){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",e,t)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(t,n,a){this.enabled=!0,this.type=t,this.$element=e(n),this.options=this.getOptions(a),this.$viewport=this.options.viewport&&e(this.options.viewport.selector||this.options.viewport);for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(t){return t=e.extend({},this.getDefaults(),this.$element.data(),t),t.delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},n.prototype.getDelegateOptions=function(){var t={},n=this.getDefaults();return this._options&&e.each(this._options,function(e,a){n[e]!=a&&(t[e]=a)}),t},n.prototype.enter=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show),void 0):n.show()},n.prototype.leave=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide),void 0):n.hide()},n.prototype.show=function(){var t=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var n=e.contains(document.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!n)return;var a=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(r);l&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element);var c=this.getPosition(),u=i[0].offsetWidth,d=i[0].offsetHeight;if(l){var p=r,f=this.$element.parent(),m=this.getPosition(f);r="bottom"==r&&c.top+c.height+d-m.scroll>m.height?"top":"top"==r&&c.top-m.scroll-d<0?"bottom":"right"==r&&c.right+u>m.width?"left":"left"==r&&c.left-u<m.left?"right":r,i.removeClass(p).addClass(r)}var g=this.getCalculatedOffset(r,c,u,d);this.applyPlacement(g,r);var h=function(){a.$element.trigger("shown.bs."+a.type),a.hoverState=null};e.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",h).emulateTransitionEnd(150):h()}},n.prototype.applyPlacement=function(t,n){var a=this.tip(),i=a[0].offsetWidth,o=a[0].offsetHeight,r=parseInt(a.css("margin-top"),10),s=parseInt(a.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),t.top=t.top+r,t.left=t.left+s,e.offset.setOffset(a[0],e.extend({using:function(e){a.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0),a.addClass("in");var l=a[0].offsetWidth,c=a[0].offsetHeight;"top"==n&&c!=o&&(t.top=t.top+o-c);var u=this.getViewportAdjustedDelta(n,t,l,c);u.left?t.left+=u.left:t.top+=u.top;var d=u.left?2*u.left-i+l:2*u.top-o+c,p=u.left?"left":"top",f=u.left?"offsetWidth":"offsetHeight";a.offset(t),this.replaceArrow(d,a[0][f],p)},n.prototype.replaceArrow=function(e,t,n){this.arrow().css(n,e?50*(1-e/t)+"%":"")},n.prototype.setContent=function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function t(){"in"!=n.hoverState&&a.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,a=this.tip(),i=e.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(i),i.isDefaultPrevented()?void 0:(a.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",t).emulateTransitionEnd(150):t(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var e=this.$element;(e.attr("title")||"string"!=typeof e.attr("data-original-title"))&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(t){t=t||this.$element;var n=t[0],a="BODY"==n.tagName;return e.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:a?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop(),width:a?e(window).width():t.outerWidth(),height:a?e(window).height():t.outerHeight()},a?{top:0,left:0}:t.offset())},n.prototype.getCalculatedOffset=function(e,t,n,a){return"bottom"==e?{top:t.top+t.height,left:t.left+t.width/2-n/2}:"top"==e?{top:t.top-a,left:t.left+t.width/2-n/2}:"left"==e?{top:t.top+t.height/2-a/2,left:t.left-n}:{top:t.top+t.height/2-a/2,left:t.left+t.width}},n.prototype.getViewportAdjustedDelta=function(e,t,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(e)){var s=t.top-o-r.scroll,l=t.top+o-r.scroll+a;s<r.top?i.top=r.top-s:l>r.top+r.height&&(i.top=r.top+r.height-l)}else{var c=t.left-o,u=t.left+o+n;c<r.left?i.left=r.left-c:u>r.width&&(i.left=r.left+r.width-u)}return i},n.prototype.getTitle=function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||("function"==typeof n.title?n.title.call(t[0]):n.title)},n.prototype.getUID=function(e){do e+=~~(1e6*Math.random());while(document.getElementById(e));return e},n.prototype.tip=function(){return this.$tip=this.$tip||e(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(t){var n=this;t&&(n=e(t.currentTarget).data("bs."+this.type),n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var a=e.fn.tooltip;e.fn.tooltip=t,e.fn.tooltip.Constructor=n,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=a,this}}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.popover"),o="object"==typeof t&&t;(i||"destroy"!=t)&&(i||a.data("bs.popover",i=new n(this,o)),"string"==typeof t&&i[t]())})}var n=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=e.extend({},e.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),e.removeClass("fade top bottom left right in"),e.find(".popover-title").html()||e.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var e=this.$element,t=this.options;return e.attr("data-content")||("function"==typeof t.content?t.content.call(e[0]):t.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip};var a=e.fn.popover;e.fn.popover=t,e.fn.popover.Constructor=n,e.fn.popover.noConflict=function(){return e.fn.popover=a,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(e){return{link:function(t,n,a){function i(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),e.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(o)}function o(){n.removeClass("collapsing"),n.css({height:"auto"})}function r(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),e.removeClass(n,"in",{to:{height:"0"}}).then(s),void 0):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}t.$watch(a.collapse,function(e){e?r():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass,e.$watch("isOpen",function(n){t.toggleClass(e.openClass,n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.accordionTransclude]},function(e){e&&(t.find("span").html(""),t.find("span").append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable=!!t.close,this.close=e.close}]).directive("alert",function(){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(e,t){return t.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(e){return{require:"alert",link:function(t,n,a,i){e(function(){i.close()},parseInt(a.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(e,t){return function(n,a,i){t||e.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),a.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),n.$watch(i.bindHtmlUnsafe,function(e){a.html(e||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(e,t,n,a){var i=a[0],o=a[1];t.find("input").css({display:"none"}),o.$render=function(){t.toggleClass(i.activeClass,angular.equals(o.$modelValue,e.$eval(n.btnRadio)))},t.bind(i.toggleEvent,function(){if(!n.disabled){var a=t.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&e.$apply(function(){o.$setViewValue(a?null:e.$eval(n.btnRadio)),o.$render()})}})}}}).directive("btnCheckbox",["$document",function(e){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(t,n,a,i){function o(){return s(a.btnCheckboxTrue,!0)}function r(){return s(a.btnCheckboxFalse,!1)}function s(e,n){var a=t.$eval(e);return angular.isDefined(a)?a:n}var l=i[0],c=i[1];n.find("input").css({display:"none"}),c.$render=function(){n.toggleClass(l.activeClass,angular.equals(c.$modelValue,o()))},n.bind(l.toggleEvent,function(){a.disabled||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})}),n.on("keypress",function(i){a.disabled||32!==i.which||e[0].activeElement!==n[0]||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(e,t,n,a){function i(t,n,i){v||(angular.extend(t,{direction:i,active:!0}),angular.extend(d.currentSlide||{},{direction:i,active:!1}),a.enabled()&&!e.noTransition&&!e.$currentTransition&&t.$element&&d.slides.length>1&&(t.$element.data(g,t.direction),d.currentSlide&&d.currentSlide.$element&&d.currentSlide.$element.data(g,t.direction),e.$currentTransition=!0,f?a.on("addClass",t.$element,function(t,n){"close"===n&&(e.$currentTransition=null,a.off("addClass",t))}):t.$element.one("$animate:close",function(){e.$currentTransition=null})),d.currentSlide=t,h=n,r())}function o(e){if(angular.isUndefined(p[e].index))return p[e];{var t;p.length}for(t=0;t<p.length;++t)if(p[t].index==e)return p[t]}function r(){s();var t=+e.interval;!isNaN(t)&&t>0&&(c=n(l,t))}function s(){c&&(n.cancel(c),c=null)}function l(){var t=+e.interval;u&&!isNaN(t)&&t>0&&p.length?e.next():e.pause()}var c,u,d=this,p=d.slides=e.slides=[],f=angular.version.minor>=4,m="uib-noTransition",g="uib-slideDirection",h=-1;d.currentSlide=null;var v=!1;d.select=e.select=function(t,n){var a=e.indexOfSlide(t);void 0===n&&(n=a>d.getCurrentIndex()?"next":"prev"),t&&t!==d.currentSlide&&!e.$currentTransition&&i(t,a,n)},e.$on("$destroy",function(){v=!0}),d.getCurrentIndex=function(){return d.currentSlide&&angular.isDefined(d.currentSlide.index)?+d.currentSlide.index:h},e.indexOfSlide=function(e){return angular.isDefined(e.index)?+e.index:p.indexOf(e)},e.next=function(){var t=(d.getCurrentIndex()+1)%p.length;return 0===t&&e.noWrap()?(e.pause(),void 0):d.select(o(t),"next")},e.prev=function(){var t=d.getCurrentIndex()-1<0?p.length-1:d.getCurrentIndex()-1;return e.noWrap()&&t===p.length-1?(e.pause(),void 0):d.select(o(t),"prev")},e.isActive=function(e){return d.currentSlide===e},e.$watch("interval",r),e.$on("$destroy",s),e.play=function(){u||(u=!0,r())},e.pause=function(){e.noPause||(u=!1,s())},d.addSlide=function(t,n){t.$element=n,p.push(t),1===p.length||t.active?(d.select(p[p.length-1]),1==p.length&&e.play()):t.active=!1},d.removeSlide=function(e){angular.isDefined(e.index)&&p.sort(function(e,t){return+e.index>+t.index});var t=p.indexOf(e);p.splice(t,1),p.length>0&&e.active?t>=p.length?d.select(p[t-1]):d.select(p[t]):h>t&&h--,0===p.length&&(d.currentSlide=null)},e.$watch("noTransition",function(e){t.data(m,e)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(e,t){return t.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}).animation(".item",["$injector","$animate",function(e,t){function n(e,t,n){e.removeClass(t),n&&n()}var a="uib-noTransition",i="uib-slideDirection",o=null;return e.has("$animateCss")&&(o=e.get("$animateCss")),{beforeAddClass:function(e,r,s){if("active"==r&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u+" "+c,s);return e.addClass(c),o?o(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()},beforeRemoveClass:function(e,r,s){if("active"===r&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u,s);return o?o(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(e,t,n){function a(e){var t=[],a=e.split("");return angular.forEach(r,function(n,i){var o=e.indexOf(i);if(o>-1){e=e.split(""),a[o]="("+n.regex+")",e[o]="$";for(var r=o+1,s=o+i.length;s>r;r++)a[r]="",e[r]="$";e=e.join(""),t.push({index:o,apply:n.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:n(t,"index")}}function i(e,t,n){return 1>n?!1:1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}var o=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)}},MMM:{regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:t.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:t.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e}},hh:{regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e}},H:{regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e}},h:{regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e}},mm:{regex:"[0-5][0-9]",apply:function(e){this.minutes=+e}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e}},sss:{regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e}},ss:{regex:"[0-5][0-9]",apply:function(e){this.seconds=+e}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e}},a:{regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)}}};this.parse=function(n,r,s){if(!angular.isString(n)||!r)return n;r=t.DATETIME_FORMATS[r]||r,r=r.replace(o,"\\$&"),this.parsers[r]||(this.parsers[r]=a(r));var l=this.parsers[r],c=l.regex,u=l.map,d=n.match(c);if(d&&d.length){var p,f;angular.isDate(s)&&!isNaN(s.getTime())?p={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&e.warn("dateparser:","baseDate is not a valid date"),p={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var m=1,g=d.length;g>m;m++){var h=u[m-1];h.apply&&h.apply.call(p,d[m])}return i(p.year,p.month,p.date)&&(f=new Date(p.year,p.month,p.date,p.hours,p.minutes,p.seconds,p.milliseconds||0)),f}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function n(e,n){return e.currentStyle?e.currentStyle[n]:t.getComputedStyle?t.getComputedStyle(e)[n]:e.style[n]}function a(e){return"static"===(n(e,"position")||"static")}var i=function(t){for(var n=e[0],i=t.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(t){var n=this.offset(t),a={top:0,left:0},o=i(t[0]);o!=e[0]&&(a=this.offset(angular.element(o)),a.top+=o.clientTop-o.scrollTop,a.left+=o.clientLeft-o.scrollLeft);var r=t[0].getBoundingClientRect();return{width:r.width||t.prop("offsetWidth"),height:r.height||t.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:a.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,n,a){var i,o,r,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(e):this.position(e),o=t.prop("offsetWidth"),r=t.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-o/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-r/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-o};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-r,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(e,t,n,a,i,o,r,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,i){l[n]=angular.isDefined(t[n])?6>i?a(t[n])(e.$parent):e.$parent.$eval(t[n]):r[n]}),angular.forEach(["minDate","maxDate"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(e){l[a]=e?new Date(e):null,l.refreshView()}):l[a]=r[a]?new Date(r[a]):null}),angular.forEach(["minMode","maxMode"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(n){l[a]=angular.isDefined(n)?n:t[a],e[a]=l[a],("minMode"==a&&l.modes.indexOf(e.datepickerMode)<l.modes.indexOf(l[a])||"maxMode"==a&&l.modes.indexOf(e.datepickerMode)>l.modes.indexOf(l[a]))&&(e.datepickerMode=l[a])}):(l[a]=r[a]||null,e[a]=l[a])}),e.datepickerMode=e.datepickerMode||r.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(t.initDate)?(this.activeDate=e.$parent.$eval(t.initDate)||new Date,e.$parent.$watch(t.initDate,function(e){e&&(c.$isEmpty(c.$modelValue)||c.$invalid)&&(l.activeDate=e,l.refreshView())
})):this.activeDate=new Date,e.isActive=function(t){return 0===l.compare(t.date,l.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){c=e,c.$render=function(){l.render()}},this.render=function(){if(c.$viewValue){var e=new Date(c.$viewValue),t=!isNaN(e);t?this.activeDate=e:s||i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$viewValue?new Date(c.$viewValue):null;c.$setValidity("dateDisabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=c.$viewValue?new Date(c.$viewValue):null;return{date:e,label:o(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),current:0===this.compare(e,new Date),customClass:this.customClass(e)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:n,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},this.fixTimeZone=function(e){var t=e.getHours();e.setHours(23===t?t+2:0)},e.select=function(t){if(e.datepickerMode===l.minMode){var n=c.$viewValue?new Date(c.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=t,e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=l.activeDate.getFullYear()+e*(l.step.years||0),n=l.activeDate.getMonth()+e*(l.step.months||0);l.activeDate.setFullYear(t,n,1),l.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===l.maxMode&&1===t||e.datepickerMode===l.minMode&&-1===t||(e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){l.element[0].focus()};e.$on("datepicker.focus",u),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),l.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;e.select(l.activeDate),u()}else!t.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,t),l.refreshView()):(e.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,n,a,i){function o(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?l[t]:29}function r(e,t){for(var n,a=new Array(t),o=new Date(e),r=0;t>r;)n=new Date(o),i.fixTimeZone(n),a[r++]=n,o.setDate(o.getDate()+1);return a}function s(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}t.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),o=new Date(n,a,1),l=i.startingDay-o.getDay(),c=l>0?7-l:-l,u=new Date(o);c>0&&u.setDate(-c+1);for(var d=r(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:t.uniqueId+"-"+p});t.labels=new Array(7);for(var f=0;7>f;f++)t.labels[f]={abbr:e(d[f].date,i.formatDayHeader),full:e(d[f].date,"EEEE")};if(t.title=e(i.activeDate,i.formatDayTitle),t.rows=i.split(d,7),t.showWeeks){t.weekNumbers=[];for(var m=(11-i.startingDay)%7,g=t.rows.length,h=0;g>h;h++)t.weekNumbers.push(s(t.rows[h][m].date))}},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},i.handleKeyDown=function(e){var t=i.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getMonth()+("pageup"===e?-1:1);i.activeDate.setMonth(n,1),t=Math.min(o(i.activeDate.getFullYear(),i.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=o(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(t)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n,a=new Array(12),o=i.activeDate.getFullYear(),r=0;12>r;r++)n=new Date(o,r,1),i.fixTimeZone(n),a[r]=angular.extend(i.createDateObject(n,i.formatMonth),{uid:t.uniqueId+"-"+r});t.title=e(i.activeDate,i.formatMonthTitle),t.rows=i.split(a,3)},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},i.handleKeyDown=function(e){var t=i.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getFullYear()+("pageup"===e?-1:1);i.activeDate.setFullYear(n)}else"home"===e?t=0:"end"===e&&(t=11);i.activeDate.setMonth(t)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,n,a){function i(e){return parseInt((e-1)/o,10)*o+1}var o=a.yearRange;a.step={years:o},a.element=t,a._refreshView=function(){for(var t,n=new Array(o),r=0,s=i(a.activeDate.getFullYear());o>r;r++)t=new Date(s+r,0,1),a.fixTimeZone(t),n[r]=angular.extend(a.createDateObject(t,a.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=a.split(n,5)},a.compare=function(e,t){return e.getFullYear()-t.getFullYear()},a.handleKeyDown=function(e){var t=a.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*a.step.years:"home"===e?t=i(a.activeDate.getFullYear()):"end"===e&&(t=i(a.activeDate.getFullYear())+o-1),a.activeDate.setFullYear(t)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(e,t,n,a,i,o,r,s,l){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(c,u,d,p){function f(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function m(e){if(angular.isNumber(e)&&(e=new Date(e)),e){if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=r.parse(e,h,c.date);return isNaN(t)?void 0:t}return void 0}return null}function g(e,t){var n=e||t;if(!d.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=r.parse(n,h);return!isNaN(a)}return!1}return!0}var h,v=angular.isDefined(d.closeOnDateSelection)?c.$parent.$eval(d.closeOnDateSelection):s.closeOnDateSelection,b=angular.isDefined(d.datepickerAppendToBody)?c.$parent.$eval(d.datepickerAppendToBody):s.appendToBody,y=angular.isDefined(d.onOpenFocus)?c.$parent.$eval(d.onOpenFocus):s.onOpenFocus,$=angular.isDefined(d.datepickerPopupTemplateUrl)?d.datepickerPopupTemplateUrl:s.datepickerPopupTemplateUrl,w=angular.isDefined(d.datepickerTemplateUrl)?d.datepickerTemplateUrl:s.datepickerTemplateUrl,k={};c.showButtonBar=angular.isDefined(d.showButtonBar)?c.$parent.$eval(d.showButtonBar):s.showButtonBar,c.getText=function(e){return c[e+"Text"]||s[e+"Text"]},c.isDisabled=function(e){return"today"===e&&(e=new Date),c.watchData.minDate&&c.compare(e,k.minDate)<0||c.watchData.maxDate&&c.compare(e,k.maxDate)>0},c.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())};var x=!1;if(s.html5Types[d.type]?(h=s.html5Types[d.type],x=!0):(h=d.datepickerPopup||s.datepickerPopup,d.$observe("datepickerPopup",function(e){var t=e||s.datepickerPopup;if(t!==h&&(h=t,p.$modelValue=null,!h))throw new Error("datepickerPopup must have a date format specified.")})),!h)throw new Error("datepickerPopup must have a date format specified.");if(x&&d.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var C=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");C.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":$});var T=angular.element(C.children()[0]);if(T.attr("template-url",w),x&&"month"===d.type&&(T.attr("datepicker-mode",'"month"'),T.attr("min-mode","month")),d.datepickerOptions){var D=c.$parent.$eval(d.datepickerOptions);D&&D.initDate&&(c.initDate=D.initDate,T.attr("init-date","initDate"),delete D.initDate),angular.forEach(D,function(e,t){T.attr(f(t),e)})}c.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(e){if(d[e]){var n=t(d[e]);if(c.$parent.$watch(n,function(t){c.watchData[e]=t,("minDate"===e||"maxDate"===e)&&(k[e]=new Date(t))}),T.attr(f(e),"watchData."+e),"datepickerMode"===e){var a=n.assign;c.$watch("watchData."+e,function(e,t){angular.isFunction(a)&&e!==t&&a(c.$parent,e)})}}}),d.dateDisabled&&T.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),d.showWeeks&&T.attr("show-weeks",d.showWeeks),d.customClass&&T.attr("custom-class","customClass({ date: date, mode: mode })"),x?p.$formatters.push(function(e){return c.date=e,e}):(p.$$parserName="date",p.$validators.date=g,p.$parsers.unshift(m),p.$formatters.push(function(e){return c.date=e,p.$isEmpty(e)?e:o(e,h)})),c.dateSelection=function(e){angular.isDefined(e)&&(c.date=e);var t=c.date?o(c.date,h):null;u.val(t),p.$setViewValue(t),v&&(c.isOpen=!1,u[0].focus())},p.$viewChangeListeners.push(function(){c.date=r.parse(p.$viewValue,h,c.date)});var S=function(e){!c.isOpen||u[0].contains(e.target)||C[0].contains(e.target)||c.$apply(function(){c.isOpen=!1})},E=function(e){27===e.which&&c.isOpen?(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!1}),u[0].focus()):40!==e.which||c.isOpen||(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!0}))};u.bind("keydown",E),c.keydown=function(e){27===e.which&&(c.isOpen=!1,u[0].focus())},c.$watch("isOpen",function(e){e?(c.position=b?i.offset(u):i.position(u),c.position.top=c.position.top+u.prop("offsetHeight"),l(function(){y&&c.$broadcast("datepicker.focus"),n.bind("click",S)},0,!1)):n.unbind("click",S)}),c.select=function(e){if("today"===e){var t=new Date;angular.isDate(c.date)?(e=new Date(c.date),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}c.dateSelection(e)},c.close=function(){c.isOpen=!1,u[0].focus()};var O=e(C)(c);C.remove(),b?n.find("body").append(O):u.after(O),c.$on("$destroy",function(){c.isOpen===!0&&(a.$$phase||c.$apply(function(){c.isOpen=!1})),O.remove(),u.unbind("keydown",E),n.unbind("click",S)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t){n||(e.bind("click",a),e.bind("keydown",i)),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t){n===t&&(n=null,e.unbind("click",a),e.unbind("keydown",i))};var a=function(e){if(n&&(!e||"disabled"!==n.getAutoClose())){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.isOpen=!1,t.$$phase||n.$apply())}}},i=function(e){27===e.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&/(38|40)/.test(e.which)&&n.isOpen&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,s,l,c){var u,d,p=this,f=e.$new(),m=a.openClass,g=angular.noop,h=t.onToggle?n(t.onToggle):angular.noop,v=!1,b=!1,y=s.find("body");this.init=function(a){p.$element=a,t.isOpen&&(d=n(t.isOpen),g=d.assign,e.$watch(d,function(e){f.isOpen=!!e})),v=angular.isDefined(t.dropdownAppendToBody),b=angular.isDefined(t.keyboardNav),v&&p.dropdownMenu&&(y.append(p.dropdownMenu),y.addClass("dropdown"),a.on("$destroy",function(){p.dropdownMenu.remove()}))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return p.toggleElement},f.getAutoClose=function(){return t.autoClose||"always"},f.getElement=function(){return p.$element},f.isKeynavEnabled=function(){return b},f.focusDropdownEntry=function(e){var t=p.dropdownMenu?angular.element(p.dropdownMenu).find("a"):angular.element(p.$element).find("ul").eq(0).find("a");switch(e){case 40:p.selectedOption=angular.isNumber(p.selectedOption)?p.selectedOption===t.length-1?p.selectedOption:p.selectedOption+1:0;break;case 38:p.selectedOption=angular.isNumber(p.selectedOption)?0===p.selectedOption?0:p.selectedOption-1:t.length-1}t[p.selectedOption].focus()},f.getDropdownElement=function(){return p.dropdownMenu},f.focusToggleElement=function(){p.toggleElement&&p.toggleElement[0].focus()},f.$watch("isOpen",function(t,n){if(v&&p.dropdownMenu){var a=r.positionElements(p.$element,p.dropdownMenu,"bottom-left",!0),s={top:a.top+"px",display:t?"block":"none"},d=p.dropdownMenu.hasClass("dropdown-menu-right");d?(s.left="auto",s.right=window.innerWidth-(a.left+p.$element.prop("offsetWidth"))+"px"):(s.left=a.left+"px",s.right="auto"),p.dropdownMenu.css(s)}var b=v?y:p.$element;if(o[t?"addClass":"removeClass"](b,m).then(function(){angular.isDefined(t)&&t!==n&&h(e,{open:!!t})}),t)p.dropdownMenuTemplateUrl&&c(p.dropdownMenuTemplateUrl).then(function(e){u=f.$new(),l(e.trim())(u,function(e){var t=e;p.dropdownMenu.replaceWith(t),p.dropdownMenu=t})}),f.focusToggleElement(),i.open(f);else{if(p.dropdownMenuTemplateUrl){u&&u.$destroy();var $=angular.element('<ul class="dropdown-menu"></ul>');p.dropdownMenu.replaceWith($),p.dropdownMenu=$}i.close(f),p.selectedOption=null}angular.isFunction(g)&&g(e,t)}),e.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)});var $=e.$on("$destroy",function(){f.$destroy()});f.$on("$destroy",$)}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(e,t,n,a){a.init(t),t.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(e,t,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(e,t,n,a){t.bind("keydown",function(e){if(-1!==[38,40].indexOf(e.which)){e.preventDefault(),e.stopPropagation();var t=a.dropdownMenu.find("a");switch(e.which){case 40:a.selectedOption=angular.isNumber(a.selectedOption)?a.selectedOption===t.length-1?a.selectedOption:a.selectedOption+1:0;break;case 38:a.selectedOption=angular.isNumber(a.selectedOption)?0===a.selectedOption?0:a.selectedOption-1:t.length-1}t[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t==e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t==e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(e,t,n){function a(t,a,o){o.modalInClass&&(i?i(a,{addClass:o.modalInClass}).start():e.addClass(a,o.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(t,n){var r=n();i?i(a,{removeClass:o.modalInClass}).start().then(r):e.removeClass(a,o.modalInClass).then(r)}))}var i=null;return t.has("$animateCss")&&(i=t.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(e,t,n,a){var i=null;return a.has("$animateCss")&&(i=a.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(a,o,r){o.addClass(r.windowClass||""),a.size=r.size,a.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},a.$isRendered=!0;var s=t.defer();r.$observe("modalRender",function(e){"true"==e&&s.resolve()}),s.promise.then(function(){var s=null;r.modalInClass&&(s=i?i(o,{addClass:r.modalInClass}).start():n.addClass(o,r.modalInClass),a.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();i?i(o,{removeClass:r.modalInClass}).start().then(a):n.removeClass(o,r.modalInClass).then(a)})),t.when(s).then(function(){var e=o[0].querySelectorAll("[autofocus]");e.length?e[0].focus():o[0].focus()});var l=e.getTop();l&&e.modalRendered(l.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function(e,t,n,a,i,o,r,s,l){function c(){for(var e=-1,t=y.keys(),n=0;n<t.length;n++)y.get(t[n]).value.backdrop&&(e=n);return e}function u(e,t){var a=n.find("body").eq(0),i=y.get(e).value;y.remove(e),p(i.modalDomEl,i.modalScope,function(){var t=i.openedClass||b;$.remove(t,e),a.toggleClass(t,$.hasKey(t))}),d(),t&&t.focus?t.focus():a.focus()}function d(){if(g&&-1==c()){var e=h;p(g,h,function(){e=null}),g=void 0,h=void 0}}function p(t,n,a){function i(){i.done||(i.done=!0,m?m(t,{event:"leave"}).start().then(function(){t.remove()}):e.leave(t),n.$destroy(),a&&a())}var r,s=null,l=function(){return r||(r=o.defer(),s=r.promise),function(){r.resolve()}};return n.$broadcast(w.NOW_CLOSING_EVENT,l),o.when(s).then(i)}function f(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}var m=null;r.has("$animateCss")&&(m=r.get("$animateCss"));var g,h,v,b="modal-open",y=l.createNew(),$=s.createNew(),w={NOW_CLOSING_EVENT:"modal.stack.now-closing"},k=0,x="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(c,function(e){h&&(h.index=e)}),n.bind("keydown",function(e){if(e.isDefaultPrevented())return e;var t=y.top();if(t&&t.value.keyboard)switch(e.which){case 27:e.preventDefault(),i.$apply(function(){w.dismiss(t.key,"escape key press")});break;case 9:w.loadFocusElementList(t);var n=!1;e.shiftKey?w.isFocusInFirstItem(e)&&(n=w.focusLastFocusableElement()):w.isFocusInLastItem(e)&&(n=w.focusFirstFocusableElement()),n&&(e.preventDefault(),e.stopPropagation())}}),w.open=function(e,t){var o=n[0].activeElement,r=t.openedClass||b;y.add(e,{deferred:t.deferred,renderDeferred:t.renderDeferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard,openedClass:t.openedClass}),$.put(r,e);var s=n.find("body").eq(0),l=c();if(l>=0&&!g){h=i.$new(!0),h.index=l;var u=angular.element('<div modal-backdrop="modal-backdrop"></div>');u.attr("backdrop-class",t.backdropClass),t.animation&&u.attr("modal-animation","true"),g=a(u)(h),s.append(g)}var d=angular.element('<div modal-window="modal-window"></div>');d.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:y.length()-1,animate:"animate"}).html(t.content),t.animation&&d.attr("modal-animation","true");var p=a(d)(t.scope);y.top().value.modalDomEl=p,y.top().value.modalOpener=o,s.append(p),s.addClass(r),w.clearFocusListCache()},w.close=function(e,t){var n=y.get(e);return n&&f(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),u(e,n.value.modalOpener),!0):!n},w.dismiss=function(e,t){var n=y.get(e);return n&&f(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),u(e,n.value.modalOpener),!0):!n},w.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},w.getTop=function(){return y.top()},w.modalRendered=function(e){var t=y.get(e);t&&t.value.renderDeferred.resolve()},w.focusFirstFocusableElement=function(){return v.length>0?(v[0].focus(),!0):!1},w.focusLastFocusableElement=function(){return v.length>0?(v[v.length-1].focus(),!0):!1},w.isFocusInFirstItem=function(e){return v.length>0?(e.target||e.srcElement)==v[0]:!1},w.isFocusInLastItem=function(e){return v.length>0?(e.target||e.srcElement)==v[v.length-1]:!1},w.clearFocusListCache=function(){v=[],k=0},w.loadFocusElementList=function(e){if((void 0===v||!v.length0)&&e){var t=e.value.modalDomEl;t&&t.length&&(v=t[0].querySelectorAll(x))}},w}]).provider("$modal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(t,n,a,i,o,r){function s(e){return e.template?a.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}function l(e){var n=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?n.push(a.when(t.invoke(e))):angular.isString(e)?n.push(a.when(t.get(e))):n.push(a.when(e))}),n}var c={},u=null;return c.getPromiseChain=function(){return u},c.open=function(t){var i=a.defer(),c=a.defer(),d=a.defer(),p={result:i.promise,opened:c.promise,rendered:d.promise,close:function(e){return r.close(p,e)},dismiss:function(e){return r.dismiss(p,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var f,m=a.all([s(t)].concat(l(t.resolve)));return f=u=a.all([u]).then(function(){return m},function(){return m}).then(function(e){var a=(t.scope||n).$new();a.$close=p.close,a.$dismiss=p.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var s,l={},u=1;t.controller&&(l.$scope=a,l.$modalInstance=p,angular.forEach(t.resolve,function(t,n){l[n]=e[u++]}),s=o(t.controller,l),t.controllerAs&&(t.bindToController&&angular.extend(s,a),a[t.controllerAs]=s)),r.open(p,{scope:a,deferred:i,renderDeferred:d,content:e[0],animation:t.animation,backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size,openedClass:t.openedClass}),c.resolve(!0)},function(e){c.reject(e),i.reject(e)}).finally(function(){u===f&&(u=null)}),p},c}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,n){var a=this,i={$setViewValue:angular.noop},o=t.numPages?n(t.numPages).assign:angular.noop;this.init=function(r,s){i=r,this.config=s,i.$render=function(){a.render()},t.itemsPerPage?e.$parent.$watch(n(t.itemsPerPage),function(t){a.itemsPerPage=parseInt(t,10),e.totalPages=a.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,e.$watch("totalItems",function(){e.totalPages=a.calculateTotalPages()}),e.$watch("totalPages",function(t){o(e.$parent,t),e.page>t?e.selectPage(t):i.$render()})},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(i.$viewValue,10)||1},e.selectPage=function(t,n){n&&n.preventDefault();var a=!e.ngDisabled||!n;a&&e.page!==t&&t>0&&t<=e.totalPages&&(n&&n.target&&n.target.blur(),i.$setViewValue(t),i.$render())},e.getText=function(t){return e[t+"Text"]||a.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(n,a,i,o){function r(e,t,n){return{number:e,text:t,active:n}}function s(e,t){var n=[],a=1,i=t,o=angular.isDefined(u)&&t>u;o&&(d?(a=Math.max(e-Math.floor(u/2),1),i=a+u-1,i>t&&(i=t,a=i-u+1)):(a=(Math.ceil(e/u)-1)*u+1,i=Math.min(a+u-1,t)));for(var s=a;i>=s;s++){var l=r(s,s,s===e);n.push(l)}if(o&&!d){if(a>1){var c=r(a-1,"...",!1);n.unshift(c)}if(t>i){var p=r(i+1,"...",!1);n.push(p)}}return n}var l=o[0],c=o[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):t.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):t.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):t.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):t.directionLinks,l.init(c,t),i.maxSize&&n.$parent.$watch(e(i.maxSize),function(e){u=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(t,n,a,i){var o=i[0],r=i[1];r&&(t.align=angular.isDefined(a.align)?t.$parent.$eval(a.align):e.align,o.init(r,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope","$parse",function(i,o,r,s,l,c,u,d){return function(i,p,f,m){function g(e){var t=(e||m.trigger||f).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}m=angular.extend({},t,a,m);var h=e(i),v=c.startSymbol(),b=c.endSymbol(),y="<div "+h+'-popup title="'+v+"title"+b+'" '+(m.useContentExp?'content-exp="contentExp()" ':'content="'+v+"content"+b+'" ')+'placement="'+v+"placement"+b+'" popup-class="'+v+"popupClass"+b+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var e=o(y);return function(t,n,a){function o(){I.isOpen?f():c()}function c(){(!P||t.$eval(a[p+"Enable"]))&&($(),I.popupDelay?E||(E=r(h,I.popupDelay,!1)):h())}function f(){v(),u.$$phase||u.$digest()}function h(){return E=null,S&&(r.cancel(S),S=null),(m.useContentExp?I.contentExp():I.content)?(b(),I.isOpen=!0,F&&F.assign(I.origScope,I.isOpen),u.$$phase||I.$apply(),T.css({display:"block"}),N(),void 0):angular.noop}function v(){I.isOpen=!1,F&&F.assign(I.origScope,I.isOpen),r.cancel(E),E=null,r.cancel(O),O=null,I.animation?S||(S=r(y,500)):y()}function b(){T&&y(),D=I.$new(),T=e(D,function(e){M?s.find("body").append(e):n.after(e)}),m.useContentExp&&(D.$watch("contentExp()",function(e){!e&&I.isOpen&&v()}),D.$watch(function(){L||(L=!0,D.$$postDigest(function(){L=!1,I.isOpen&&N()}))}))}function y(){S=null,T&&(T.remove(),T=null),D&&(D.$destroy(),D=null)}function $(){w(),k(),x()}function w(){I.popupClass=a[p+"Class"]}function k(){var e=a[p+"Placement"];I.placement=angular.isDefined(e)?e:m.placement}function x(){var e=a[p+"PopupDelay"],t=parseInt(e,10);I.popupDelay=isNaN(t)?m.popupDelay:t}function C(){var e=a[p+"Trigger"];U(),A=g(e),"none"!==A.show&&A.show.forEach(function(e,t){e===A.hide[t]?n[0].addEventListener(e,o):e&&(n[0].addEventListener(e,c),n[0].addEventListener(A.hide[t],f))})}var T,D,S,E,O,M=angular.isDefined(m.appendToBody)?m.appendToBody:!1,A=g(void 0),P=angular.isDefined(a[p+"Enable"]),I=t.$new(!0),L=!1,F=angular.isDefined(a[p+"IsOpen"])?d(a[p+"IsOpen"]):!1,N=function(){T&&(O||(O=r(function(){T.css({top:0,left:0,width:"auto",height:"auto"});var e=l.position(T),t=l.positionElements(n,T,I.placement,M);t.top+="px",t.left+="px",t.width=e.width+"px",t.height=e.height+"px",T.css(t),O=null},0,!1)))};I.origScope=t,I.isOpen=!1,I.contentExp=function(){return t.$eval(a[i])},m.useContentExp||a.$observe(i,function(e){I.content=e,!e&&I.isOpen?v():N()}),a.$observe("disabled",function(e){E&&e&&(r.cancel(E),E=null),e&&I.isOpen&&v()}),a.$observe(p+"Title",function(e){I.title=e,N()}),a.$observe(p+"Placement",function(){I.isOpen&&(k(),N())}),F&&t.$watch(F,function(e){e!==I.isOpen&&o()});var U=function(){A.show.forEach(function(e){n.unbind(e,c)}),A.hide.forEach(function(e){n.unbind(e,f)})};C();var V=t.$eval(a[p+"Animation"]);I.animation=angular.isDefined(V)?!!V:m.animation;var H=t.$eval(a[p+"AppendToBody"]);M=angular.isDefined(H)?H:M,M&&t.$on("$locationChangeSuccess",function(){I.isOpen&&v()}),t.$on("$destroy",function(){r.cancel(S),r.cancel(E),r.cancel(O),U(),y(),I=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var s,l,c,u=i.$eval(r.tooltipTemplateTranscludeScope),d=0,p=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),c&&(e.leave(c).then(function(){l=null
}),l=c,c=null)};i.$watch(t.parseAsResourceUrl(r.tooltipTemplateTransclude),function(t){var r=++d;t?(a(t,!0).then(function(a){if(r===d){var i=u.$new(),l=a,f=n(l)(i,function(t){p(),e.enter(t,o)});s=i,c=f,s.$emit("$includeContentLoaded",t)}},function(){r===d&&(p(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):p()}),i.$on("$destroy",p)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(e,t,n){e.placement&&t.addClass(e.placement),e.popupClass&&t.addClass(e.popupClass),e.animation()&&t.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(e){return e("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(e){return e("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(e,t,n){return t||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(e){return e("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(e){return e("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=angular.isDefined(e.max)?e.max:n.max,this.addBar=function(t,n){i||n.css({transition:"none"}),this.bars.push(t),t.max=e.max,t.$watch("value",function(){t.recalculatePercentage()}),t.recalculatePercentage=function(){t.percent=+(100*t.value/t.max).toFixed(2);var e=a.bars.reduce(function(e,t){return e+t.percent},0);e>100&&(t.percent-=e-100)},t.$on("$destroy",function(){n=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)},e.$watch("max",function(){a.bars.forEach(function(t){t.max=e.max,t.recalculatePercentage()})})}]).directive("uibProgress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("progress",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html",link:function(){t&&e.warn("progress is now deprecated. Use uib-progress instead")}}}]).directive("uibBar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t)}}}).directive("bar",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(n,a,i,o){t&&e.warn("bar is now deprecated. Use uib-bar instead"),o.addBar(n,a)}}}]).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(a.$setViewValue(a.$viewValue===t?0:t),a.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,n=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(n,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect(),e.selectCalled=!1)}),e.active=!0,e.selectCalled||(e.onSelect(),e.selectCalled=!0)},t.addTab=function(e){n.push(e),1===n.length&&e.active!==!1?e.active=!0:e.active?t.select(e):e.active=!1},t.removeTab=function(e){var i=n.indexOf(e);if(e.active&&n.length>1&&!a){var o=i==n.length-1?i-1:i+1;t.select(n[o])}n.splice(i,1)};var a;e.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(e,t){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(n,a,i,o,r){n.$watch("active",function(e){e&&o.select(n)}),n.disabled=!1,i.disable&&n.$parent.$watch(e(i.disable),function(e){n.disabled=!!e}),i.disabled&&(t.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(e(i.disabled),function(e){n.disabled=!!e})),n.select=function(){n.disabled||(n.active=!0)},o.addTab(n),n.$on("$destroy",function(){o.removeTab(n)}),n.$transcludeFn=r}}}]).directive("tabHeadingTransclude",function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||e.hasAttribute("x-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase()||"x-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,n,a){var i=t.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,n,a,i,o){function r(){var t=parseInt(e.hours,10),n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===h[1]&&(t+=12)),t):void 0}function s(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function l(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e.toString()}function c(e){u(),g.$setViewValue(new Date(m)),d(e)}function u(){g.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var n=m.getHours(),a=m.getMinutes();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:l(n),"m"!==t&&(e.minutes=l(a)),e.meridian=m.getHours()<12?h[0]:h[1]}function p(e,t){var n=new Date(e.getTime()+6e4*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes()),a}function f(e){m=p(m,e),c()}var m=new Date,g={$setViewValue:angular.noop},h=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):o.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){g=n,g.$render=this.render,g.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),r=a.eq(1),s=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):o.mousewheel;s&&this.setupMousewheelEvents(i,r);var l=angular.isDefined(t.arrowkeys)?e.$parent.$eval(t.arrowkeys):o.arrowkeys;l&&this.setupArrowkeyEvents(i,r),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):o.readonlyInput,this.setupInputEvents(i,r)};var v=o.hourStep;t.hourStep&&e.$parent.$watch(n(t.hourStep),function(e){v=parseInt(e,10)});var b=o.minuteStep;t.minuteStep&&e.$parent.$watch(n(t.minuteStep),function(e){b=parseInt(e,10)});var y;e.$parent.$watch(n(t.min),function(e){var t=new Date(e);y=isNaN(t)?void 0:t});var $;e.$parent.$watch(n(t.max),function(e){var t=new Date(e);$=isNaN(t)?void 0:t}),e.noIncrementHours=function(){var e=p(m,60*v);return e>$||m>e&&y>e},e.noDecrementHours=function(){var e=p(m,60*-v);return y>e||e>m&&e>$},e.noIncrementMinutes=function(){var e=p(m,b);return e>$||m>e&&y>e},e.noDecrementMinutes=function(){var e=p(m,-b);return y>e||e>m&&e>$},e.noToggleMeridian=function(){return m.getHours()<13?p(m,720)>$:p(m,-720)<y},e.showMeridian=o.showMeridian,t.showMeridian&&e.$parent.$watch(n(t.showMeridian),function(t){if(e.showMeridian=!!t,g.$error.time){var n=r(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(m.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n){t.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply())}),n.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply())})},this.setupInputEvents=function(t,n){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void 0;var a=function(t,n){g.$setViewValue(null),g.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n)};e.updateHours=function(){var e=r(),t=s();angular.isDefined(e)&&angular.isDefined(t)?(m.setHours(e),y>m||m>$?a(!0):c("h")):a(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=l(e.hours)})}),e.updateMinutes=function(){var e=s(),t=r();angular.isDefined(e)&&angular.isDefined(t)?(m.setMinutes(e),y>m||m>$?a(void 0,!0):c("m")):a(void 0,!0)},n.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=l(e.minutes)})})},this.render=function(){var t=g.$viewValue;isNaN(t)?(g.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(m=t),y>m||m>$?(g.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):u(),d())},e.showSpinners=angular.isDefined(t.showSpinners)?e.$parent.$eval(t.showSpinners):o.showSpinners,e.incrementHours=function(){e.noIncrementHours()||f(60*v)},e.decrementHours=function(){e.noDecrementHours()||f(60*-v)},e.incrementMinutes=function(){e.noIncrementMinutes()||f(b)},e.decrementMinutes=function(){e.noDecrementMinutes()||f(-b)},e.toggleMeridian=function(){e.noToggleMeridian()||f(720*(m.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(e,t){return t.templateUrl||"template/timepicker/timepicker.html"},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(e,t,n,a,i){function o(e){for(var t in e)if(void 0!==s.style[t])return e[t]}i||a.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var r=function(a,i,o){o=o||{};var s=e.defer(),l=r[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),t(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},c={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return r.transitionEndEventName=o(l),r.animationEndEventName=o(c),r}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(e,t,n,a,i,o,r,s,l){var c=[9,13,27,38,40],u=200;return{require:["ngModel","^?ngModelOptions"],link:function(d,p,f,m){function g(){N.moveInProgress||(N.moveInProgress=!0,N.$digest()),q&&a.cancel(q),q=a(function(){N.matches.length&&h(),N.moveInProgress=!1,N.$digest()},u)}function h(){N.position=O?s.offset(p):s.position(p),N.position.top+=p.prop("offsetHeight")}var v=m[0],b=m[1],y=d.$eval(f.typeaheadMinLength);y||0===y||(y=1);var $,w,k=d.$eval(f.typeaheadWaitMs)||0,x=d.$eval(f.typeaheadEditable)!==!1,C=t(f.typeaheadLoading).assign||angular.noop,T=t(f.typeaheadOnSelect),D=angular.isDefined(f.typeaheadSelectOnBlur)?d.$eval(f.typeaheadSelectOnBlur):!1,S=t(f.typeaheadNoResults).assign||angular.noop,E=f.typeaheadInputFormatter?t(f.typeaheadInputFormatter):void 0,O=f.typeaheadAppendToBody?d.$eval(f.typeaheadAppendToBody):!1,M=d.$eval(f.typeaheadFocusFirst)!==!1,A=f.typeaheadSelectOnExact?d.$eval(f.typeaheadSelectOnExact):!1,P=t(f.ngModel),I=t(f.ngModel+"($$$p)"),L=function(e,t){return angular.isFunction(P(d))&&b&&b.$options&&b.$options.getterSetter?I(e,{$$$p:t}):P.assign(e,t)},F=l.parse(f.typeahead),N=d.$new(),U=d.$on("$destroy",function(){N.$destroy()});N.$on("$destroy",U);var V="typeahead-"+N.$id+"-"+Math.floor(1e4*Math.random());p.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":V});var H=angular.element("<div typeahead-popup></div>");H.attr({id:V,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(f.typeaheadTemplateUrl)&&H.attr("template-url",f.typeaheadTemplateUrl),angular.isDefined(f.typeaheadPopupTemplateUrl)&&H.attr("popup-template-url",f.typeaheadPopupTemplateUrl);var _=function(){N.matches=[],N.activeIdx=-1,p.attr("aria-expanded",!1)},R=function(e){return V+"-option-"+e};N.$watch("activeIdx",function(e){0>e?p.removeAttr("aria-activedescendant"):p.attr("aria-activedescendant",R(e))});var j=function(e,t){return N.matches.length>t&&e?e.toUpperCase()===N.matches[t].label.toUpperCase():!1},z=function(e){var t={$viewValue:e};C(d,!0),S(d,!1),n.when(F.source(d,t)).then(function(n){var a=e===v.$viewValue;if(a&&$)if(n&&n.length>0){N.activeIdx=M?0:-1,S(d,!1),N.matches.length=0;for(var i=0;i<n.length;i++)t[F.itemName]=n[i],N.matches.push({id:R(i),label:F.viewMapper(N,t),model:n[i]});N.query=e,h(),p.attr("aria-expanded",!0),A&&1===N.matches.length&&j(e,0)&&N.select(0)}else _(),S(d,!0);a&&C(d,!1)},function(){_(),C(d,!1),S(d,!0)})};O&&(angular.element(o).bind("resize",g),i.find("body").bind("scroll",g));var q;N.moveInProgress=!1,_(),N.query=void 0;var B,W=function(e){B=a(function(){z(e)},k)},G=function(){B&&a.cancel(B)};v.$parsers.unshift(function(e){return $=!0,0===y||e&&e.length>=y?k>0?(G(),W(e)):z(e):(C(d,!1),G(),_()),x?e:e?(v.$setValidity("editable",!1),void 0):(v.$setValidity("editable",!0),null)}),v.$formatters.push(function(e){var t,n,a={};return x||v.$setValidity("editable",!0),E?(a.$model=e,E(d,a)):(a[F.itemName]=e,t=F.viewMapper(d,a),a[F.itemName]=void 0,n=F.viewMapper(d,a),t!==n?t:e)}),N.select=function(e){var t,n,i={};w=!0,i[F.itemName]=n=N.matches[e].model,t=F.modelMapper(d,i),L(d,t),v.$setValidity("editable",!0),v.$setValidity("parse",!0),T(d,{$item:n,$model:t,$label:F.viewMapper(d,i)}),_(),N.$eval(f.typeaheadFocusOnSelect)!==!1&&a(function(){p[0].focus()},0,!1)},p.bind("keydown",function(e){if(0!==N.matches.length&&-1!==c.indexOf(e.which)){if(-1===N.activeIdx&&(9===e.which||13===e.which))return _(),N.$digest(),void 0;e.preventDefault(),40===e.which?(N.activeIdx=(N.activeIdx+1)%N.matches.length,N.$digest()):38===e.which?(N.activeIdx=(N.activeIdx>0?N.activeIdx:N.matches.length)-1,N.$digest()):13===e.which||9===e.which?N.$apply(function(){N.select(N.activeIdx)}):27===e.which&&(e.stopPropagation(),_(),N.$digest())}}),p.bind("blur",function(){D&&N.matches.length&&-1!==N.activeIdx&&!w&&(w=!0,N.$apply(function(){N.select(N.activeIdx)})),$=!1,w=!1});var Y=function(e){p[0]!==e.target&&3!==e.which&&0!==N.matches.length&&(_(),r.$$phase||N.$digest())};i.bind("click",Y),d.$on("$destroy",function(){i.unbind("click",Y),O&&K.remove(),H.remove()});var K=e(H)(N);O?i.find("body").append(K):p.after(K)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"template/typeahead/typeahead-match.html";e(r).then(function(e){t(e.trim())(a,function(e){i.replaceWith(e)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,r){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=r?(""+t).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')
}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(e){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:e.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(e){try{e=angular.module("risevision.widget.common.widget-button-toolbar")}catch(t){e=angular.module("risevision.widget.common.widget-button-toolbar",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(e,t){t.addClass("fa"),t.addClass("fa-question-circle"),t.addClass("fa-lg")}}}])}(),function(e){"use strict";e.module("risevision.widget.common.google-drive-picker",["risevision.common.i18n"]).directive("googleDrivePicker",["$window","$document","$log","$templateCache","apiAuth","apiGooglePicker",function(e,t,n,a,i,o){return{restrict:"E",scope:{viewId:"@"},template:a.get("google-drive-picker-template.html"),link:function(a,r,s){function l(e){o.get().then(function(t){e[t.picker.Response.ACTION]===t.picker.Action.PICKED?(n.debug("Files picked",e[t.picker.Response.DOCUMENTS]),a.$emit("picked",e[t.picker.Response.DOCUMENTS])):e[t.picker.Response.ACTION]===t.picker.Action.CANCEL&&(n.debug("File pick cancelled"),a.$emit("cancel"))})}function c(t){var n,a,o=u.createElement("a");u.referrer?"localhost"===u.location.hostname?n=e.location.protocol+"//"+e.location.host:(o.href=u.referrer,n=o.protocol+"//"+o.hostname):n=e.location.protocol+"//"+e.location.host,a=(new t.picker.PickerBuilder).setOrigin(n).addView(d).setOAuthToken(i.getAuthToken()).setCallback(l).build(),a.setVisible(!0)}var u=t[0],d=s.viewId||"docs";r.on("click",function(){i.getAuthToken()?o.get().then(c):i.getAuthToken()||i.authorize(!1).then(function(e){e&&!e.error&&o.get().then(c)})}),i.authorize(!0).then(null,function(e){n.warn(e)})}}}])}(angular),function(e){try{e=angular.module("risevision.widget.common.google-drive-picker")}catch(t){e=angular.module("risevision.widget.common.google-drive-picker",[])}e.run(["$templateCache",function(e){"use strict";e.put("google-drive-picker-template.html",'<div class="google-drive-picker">\n  <button type="button" class="btn btn-default">\n    {{"google-drive-picker.select" | translate }}\n    <img class="icon-right" src="//s3.amazonaws.com/Rise-Images/Icons/drive.svg">\n  </button>\n</div>\n')}])}();var isClientJS=!1;if(function(e){"use strict";e.module("risevision.widget.common.google-drive-picker").factory("oauthAPILoader",["$q","$log","gapiLoader",function(e,t,n){var a,i=e.defer(),o={get:function(){return a||(a=i.promise,n.get().then(function(e){e.load("auth",function(){t.info("auth API is loaded"),i.resolve(e)})})),a}};return o}]).factory("gapiLoader",["$q","$window",function(e,t){var n={get:function(){var n,a=e.defer();return t.isClientJS?a.resolve(t.gapi):(n=function(){a.resolve(t.gapi),t.removeEventListener("gapi.loaded",n,!1)},t.addEventListener("gapi.loaded",n,!1)),a.promise}};return n}]).factory("pickerLoader",["$q","$window","$log","gapiLoader",function(e,t,n,a){var i={get:function(){var t,i=e.defer();return t||(t=i.promise,a.get().then(function(e){e.load("picker",function(){n.info("picker API is loaded"),i.resolve(e)})})),t}};return i}])}(angular),function(e){"use strict";e.module("risevision.widget.common.google-drive-picker").value("CLIENT_ID","614513768474.apps.googleusercontent.com").value("SCOPE",["https://www.googleapis.com/auth/drive"]).factory("apiAuth",["$q","$http","$log","gapiLoader","oauthAPILoader","CLIENT_ID","SCOPE",function(e,t,n,a,i,o,r){var s=null,l={};return l.authorize=function(t){var a=e.defer(),l={client_id:o,scope:r,immediate:t};return i.get().then(function(e){e.auth.authorize(l,function(e){e&&!e.error?(s=e.access_token,a.resolve(e)):(a.reject("Authentication Error: "+e.error),n.debug("authorize result",e))})}),a.promise},l.getAuthToken=function(){return s},l}])}(angular),function(e){"use strict";e.module("risevision.widget.common.google-drive-picker").factory("apiGooglePicker",["$q","$window","$log","pickerLoader",function(e,t,n,a){var i,o=e.defer(),r={get:function(){return i||(i=o.promise,a.get().then(function(){o.resolve(t.google)})),i}};return r}])}(angular),angular.module("colorpicker.module",[]).factory("Helper",function(){"use strict";return{closestSlider:function(e){var t=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;return t.bind(e)("I")?e.parentNode:e},getOffset:function(e,t){for(var n=0,a=0,i=e.getBoundingClientRect();e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t||"BODY"!==e.tagName?(n+=e.scrollLeft,a+=e.scrollTop):(n+=document.documentElement.scrollLeft||e.scrollLeft,a+=document.documentElement.scrollTop||e.scrollTop),e=e.offsetParent;return{top:i.top+window.pageYOffset,left:i.left+window.pageXOffset,scrollX:n,scrollY:a}},stringParsers:[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}}]}}).factory("Color",["Helper",function(e){"use strict";return{value:{h:1,s:1,b:1,a:1},rgb:function(){var e=this.toRGB();return"rgb("+e.r+","+e.g+","+e.b+")"},rgba:function(){var e=this.toRGB();return"rgba("+e.r+","+e.g+","+e.b+","+e.a+")"},hex:function(){return this.toHex()},RGBtoHSB:function(e,t,n,a){e/=255,t/=255,n/=255;var i,o,r,s;return r=Math.max(e,t,n),s=r-Math.min(e,t,n),i=0===s?null:r===e?(t-n)/s:r===t?(n-e)/s+2:(e-t)/s+4,i=(i+360)%6*60/360,o=0===s?0:s/r,{h:i||1,s:o,b:r,a:a||1}},setColor:function(t){t=t?t.toLowerCase():t;for(var n in e.stringParsers)if(e.stringParsers.hasOwnProperty(n)){var a=e.stringParsers[n],i=a.re.exec(t),o=i&&a.parse(i);if(o)return this.value=this.RGBtoHSB.apply(null,o),!1}},setHue:function(e){this.value.h=1-e},setSaturation:function(e){this.value.s=e},setLightness:function(e){this.value.b=1-e},setAlpha:function(e){this.value.a=parseInt(100*(1-e),10)/100},toRGB:function(e,t,n,a){e||(e=this.value.h,t=this.value.s,n=this.value.b),e*=360;var i,o,r,s,l;return e=e%360/60,l=n*t,s=l*(1-Math.abs(e%2-1)),i=o=r=n-l,e=~~e,i+=[l,s,0,0,s,l][e],o+=[s,l,l,s,0,0][e],r+=[0,0,s,l,l,s][e],{r:Math.round(255*i),g:Math.round(255*o),b:Math.round(255*r),a:a||this.value.a}},toHex:function(e,t,n,a){var i=this.toRGB(e,t,n,a);return"#"+(1<<24|parseInt(i.r,10)<<16|parseInt(i.g,10)<<8|parseInt(i.b,10)).toString(16).substr(1)}}}]).factory("Slider",["Helper",function(e){"use strict";var t={maxLeft:0,maxTop:0,callLeft:null,callTop:null,knob:{top:0,left:0}},n={};return{getSlider:function(){return t},getLeftPosition:function(e){return Math.max(0,Math.min(t.maxLeft,t.left+((e.pageX||n.left)-n.left)))},getTopPosition:function(e){return Math.max(0,Math.min(t.maxTop,t.top+((e.pageY||n.top)-n.top)))},setSlider:function(a,i){var o=e.closestSlider(a.target),r=e.getOffset(o,i),s=o.getBoundingClientRect(),l=a.clientX-s.left,c=a.clientY-s.top;t.knob=o.children[0].style,t.left=a.pageX-r.left-window.pageXOffset+r.scrollX,t.top=a.pageY-r.top-window.pageYOffset+r.scrollY,n={left:a.pageX-(l-t.left),top:a.pageY-(c-t.top)}},setSaturation:function(e,n){t={maxLeft:100,maxTop:100,callLeft:"setSaturation",callTop:"setLightness"},this.setSlider(e,n)},setHue:function(e,n){t={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setHue"},this.setSlider(e,n)},setAlpha:function(e,n){t={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setAlpha"},this.setSlider(e,n)},setKnob:function(e,n){t.knob.top=e+"px",t.knob.left=n+"px"}}}]).directive("colorpicker",["$document","$compile","Color","Slider","Helper",function(e,t,n,a,i){"use strict";return{require:"?ngModel",restrict:"A",link:function(o,r,s,l){function c(){e.on("mousemove",d),e.on("mouseup",p)}function u(){try{L.css("backgroundColor",A[$]())}catch(e){L.css("backgroundColor",A.toHex())}I.css("backgroundColor",A.toHex(A.value.h,1,1,1)),"rgba"===$&&(y.css.backgroundColor=A.toHex())}function d(e){var t=a.getLeftPosition(e),n=a.getTopPosition(e),i=a.getSlider();a.setKnob(n,t),i.callLeft&&A[i.callLeft].call(A,t/100),i.callTop&&A[i.callTop].call(A,n/100),u();var s=A[$]();return r.val(s),l&&o.$apply(l.$setViewValue(s)),D&&N.val(s),!1}function p(){v("colorpicker-selected"),e.off("mousemove",d),e.off("mouseup",p)}function f(e){A.setColor(r.val()),D&&!e&&N.val(r.val()),F.eq(0).css({left:100*A.value.s+"px",top:100-100*A.value.b+"px"}),F.eq(1).css("top",100*(1-A.value.h)+"px"),F.eq(2).css("top",100*(1-A.value.a)+"px"),u()}function m(){var e,t=i.getOffset(r[0]);return angular.isDefined(s.colorpickerParent)&&(t.left=0,t.top=0),"top"===k?e={top:t.top-147,left:t.left}:"right"===k?e={top:t.top,left:t.left+126}:"bottom"===k?e={top:t.top+r[0].offsetHeight+2,left:t.left}:"left"===k&&(e={top:t.top,left:t.left-150}),{top:e.top+"px",left:e.left+"px"}}function g(){b()}function h(){M.hasClass("colorpicker-visible")||(f(),M.addClass("colorpicker-visible").css(m()),v("colorpicker-shown"),x===!1&&e.on("mousedown",g),s.colorpickerIsOpen&&(o[s.colorpickerIsOpen]=!0,o.$$phase||o.$digest()))}function v(e){l&&o.$emit(e,{name:s.ngModel,value:l.$modelValue})}function b(){M.hasClass("colorpicker-visible")&&(M.removeClass("colorpicker-visible"),v("colorpicker-closed"),e.off("mousedown",g),s.colorpickerIsOpen&&(o[s.colorpickerIsOpen]=!1,o.$$phase||o.$digest()))}var y,$=s.colorpicker?s.colorpicker:"hex",w=angular.isDefined(s.backgroundSetting)?!0:!1,k=angular.isDefined(s.colorpickerPosition)?s.colorpickerPosition:"bottom",x=angular.isDefined(s.colorpickerInline)?s.colorpickerInline:!1,C=angular.isDefined(s.colorpickerFixedPosition)?s.colorpickerFixedPosition:!1,T=angular.isDefined(s.colorpickerParent)?r.parent():angular.element(document.body),D=angular.isDefined(s.colorpickerWithInput)?s.colorpickerWithInput:!1,S=D?'<input type="text" name="colorpicker-input" spellcheck="false">':"",E=x?"":'<button type="button" class="close close-colorpicker">&times;</button>',O=w?'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha>'+S+"</div></div>":'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha><colorpicker-preview></colorpicker-preview>'+S+E+"</div></div>",M=angular.element(O),A=n,P=M.find("colorpicker-hue"),I=M.find("colorpicker-saturation"),L=M.find("colorpicker-preview"),F=M.find("i");if(t(M)(o),D){var N=M.find("input");N.on("mousedown",function(e){e.stopPropagation()}).on("keyup",function(){var e=this.value;r.val(e),l&&l.$modelValue!==e&&(o.$apply(l.$setViewValue(e)),f(!0))})}"rgba"===$&&(M.addClass("alpha"),y=M.find("colorpicker-alpha"),y.on("click",function(e){a.setAlpha(e,C),d(e)}).on("mousedown",function(e){a.setAlpha(e,C),c()}).on("mouseup",function(){v("colorpicker-selected-alpha")})),P.on("click",function(e){a.setHue(e,C),d(e)}).on("mousedown",function(e){a.setHue(e,C),c()}).on("mouseup",function(){v("colorpicker-selected-hue")}),I.on("click",function(e){a.setSaturation(e,C),d(e),angular.isDefined(s.colorpickerCloseOnSelect)&&b()}).on("mousedown",function(e){a.setSaturation(e,C),c()}).on("mouseup",function(){v("colorpicker-selected-saturation")}),C&&M.addClass("colorpicker-fixed-position"),M.addClass("colorpicker-position-"+k),"true"===x&&M.addClass("colorpicker-inline"),T.append(M),l&&(l.$render=function(){r.val(l.$viewValue),f()}),r.on("blur keyup change",function(){f()}),r.on("$destroy",function(){M.remove()}),x===!1?r.on("click",h):h(),M.on("mousedown",function(e){e.stopPropagation(),e.preventDefault()}),M.find("button").on("click",function(){b()}),s.colorpickerIsOpen&&o.$watch(s.colorpickerIsOpen,function(e){e===!0?h():e===!1&&b()})}}}]),"undefined"==typeof TEMPLATES)var TEMPLATES={};TEMPLATES["alignment.html"]='<div class="btn-group alignment">\n  <button type="button" class="btn btn-default btn-sm btn-alignment dropdown-toggle"\n    data-toggle="dropdown" data-wysihtml5-command-value="left">\n    <i class="fa fa-align-left"></i>\n    <span class="caret"></span>\n  </button>\n  <div class="dropdown-menu" role="menu">\n    <div class="btn-group">\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="left" tabindex="-1">\n        <i class="fa fa-align-left"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="center" tabindex="-1">\n        <i class="fa fa-align-center"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="right" tabindex="-1">\n        <i class="fa fa-align-right"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="justify" tabindex="-1">\n        <i class="fa fa-align-justify"></i>\n      </button>\n    </div>\n  </div>\n</div>\n',function(e,t,n,a){"use strict";function i(t,n){function i(){l.append(a["alignment.html"]),c=l.find(".btn-alignment"),r(n.align),l.find(".dropdown-menu button").on("click",function(){var t=e(this).data("wysihtml5-command-value");r(t),l.trigger("alignmentChanged",t)})}function o(){return c.data("wysihtml5-command-value")}function r(e){var t=l.find(".btn-alignment .fa"),n=t.attr("class").match(/fa-align-[a-z]+/g),a="fa-align-"+e;n&&n.length>0&&t.removeClass(n[0]),t.addClass(a),c.data("wysihtml5-command-value",e)}function s(){r(u)}var l=e(t),c=null,u="left";return n=e.extend({},{align:u},n),i(),{getAlignment:o,setAlignment:r,reset:s}}var o="alignment";e.fn.alignment=function(t){return this.each(function(){e.data(this,"plugin_"+o)||e.data(this,"plugin_"+o,new i(this,t))})}}(jQuery,window,document,TEMPLATES);var WIDGET_SETTINGS_UI_CONFIG={families:"Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;Webdings=webdings;Wingdings=wingdings,zapf dingbats;",sizes:"8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px"};if(function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(e,t){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:e.get("_angular/url-field/url-field.html"),link:function(e,n,a,i){function o(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,o=n.length;o>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function r(){if("undefined"!==e.fileType&&"undefined"!==e.url&&"image"===e.fileType){var t=new Image;t.onload=function(){e.valid=!0,e.$apply()},t.onerror=function(){e.valid=!1,e.invalidType=e.fileType,e.$apply()},t.src=e.url}}function s(t){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),a=n.test(t),a&&"undefined"!=typeof e.fileType?(a=o(t,e.fileType),a||(e.invalidType=e.fileType)):e.invalidType="url",a&&r(),a}e.doValidation=!0,e.forcedValid=!1,e.valid=!0,e.invalidType="url",e.allowInitEmpty="undefined"!=typeof a.initEmpty,e.blur=function(){e.$emit("urlFieldBlur")},e.$watch("url",function(t){"undefined"!=typeof t&&null!==t&&(""!==t&&e.allowInitEmpty&&(e.allowInitEmpty=!1),e.doValidation&&!e.allowInitEmpty&&(e.valid=s(e.url)))}),e.$watch("valid",function(e){i&&(t.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",e))}),e.$watch("doValidation",function(t){"undefined"!=typeof e.url&&(t?(e.forcedValid=!1,e.allowInitEmpty||(e.valid=s(e.url))):(e.forcedValid=!0,e.valid=!0))})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.url-field")}catch(t){e=angular.module("risevision.widget.common.url-field",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting",["angularLoad","ui.tinymce","risevision.common.i18n","risevision.widget.common.url-field"]).directive("fontSetting",["$templateCache","$log","$window","googleFontLoader",function(e,t,n,a){return{restrict:"AE",scope:{fontData:"=",previewText:"@",verticalAlign:"@"},template:e.get("_angular/font-setting/font-setting.html"),transclude:!1,link:function(e,t){function i(){e.tinymceOptions={font_formats:"Use Custom Font=custom;"+WIDGET_SETTINGS_UI_CONFIG.families+e.googleFontList,fontsize_formats:"Custom "+(""!==e.fontData.customSize?e.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes,menubar:!1,plugins:"textcolor colorpicker",skin_url:"//s3.amazonaws.com/rise-common/styles/tinymce/rise",statusbar:!1,toolbar:"fontselect fontsizeselect | alignleft aligncenter alignright alignjustify"+(e.verticalAlign?" aligntop alignmiddle alignbottom":"")+" | forecolor backcolor | bold italic underline",setup:function(t){e.verticalAlign&&p(t),t.on("init",function(){o(t),v=!1}),t.on("ExecCommand",function(e){r(t,e)})},init_instance_callback:function(e){var t=e.formatter.apply,n=e.formatter.remove;e.formatter.apply=function(n,a,i){var o={command:n,value:a.value};t(n,a,i),e.fire("ExecCommand",o)},e.formatter.remove=function(t,a,i){var o={command:t,value:a&&a.value?a.value:null};n(t,a,i),e.fire("ExecCommand",o)}}}}function o(t){if(e.fontData){switch("custom"===e.fontData.font.type&&e.fontData.font.url?t.execCommand("FontName",!1,"custom"):t.execCommand("FontName",!1,e.fontData.font.family),t.execCommand("FontSize",!1,e.fontData.size),e.fontData.align){case"left":t.execCommand("JustifyLeft",!1);break;case"center":t.execCommand("JustifyCenter",!1);break;case"right":t.execCommand("JustifyRight",!1);break;case"justify":t.execCommand("JustifyFull",!1)}e.verticalAlign&&t.execCommand("mceToggleVertical",!1,e.fontData.verticalAlign),m.find(".mce-colorbutton[aria-label='Text color'] span").css("background-color",e.fontData.forecolor),m.find(".mce-colorbutton[aria-label='Background color'] span").css("background-color",e.fontData.backcolor),e.fontData.bold&&s(m.find(".mce-btn[aria-label='Bold']")),e.fontData.italic&&s(m.find(".mce-btn[aria-label='Italic']")),e.fontData.underline&&s(m.find(".mce-btn[aria-label='Underline']"))}}function r(t,n){switch(n.command){case"FontName":if(v)return;if("custom"===n.value)return g.modal("show"),void 0;e.fontData.font.family=n.value,e.fontData.font.type=c(n.value);break;case"FontSize":if(v)return;if("Custom"===n.value)return h.modal("show"),void 0;e.fontData.size=n.value;break;case"JustifyLeft":e.fontData.align="left";break;case"JustifyCenter":e.fontData.align="center";break;case"JustifyRight":e.fontData.align="right";break;case"JustifyFull":e.fontData.align="justify";break;case"mceToggleVertical":n.value?(f(n.value),e.fontData.verticalAlign!==n.value&&f(e.fontData.verticalAlign)):f(e.defaultFont.verticalAlign),e.fontData.verticalAlign=n.value?n.value:e.defaultFont.verticalAlign;break;case"forecolor":e.fontData.forecolor=n.value?n.value:e.defaultFont.forecolor;break;case"hilitecolor":e.fontData.backcolor=n.value?n.value:e.defaultFont.backcolor;break;case"mceToggleFormat":"bold"===n.value?(e.fontData.bold=!e.fontData.bold,s(m.find(".mce-btn[aria-label='Bold']"))):"italic"===n.value?(e.fontData.italic=!e.fontData.italic,s(m.find(".mce-btn[aria-label='Italic']"))):"underline"===n.value&&(e.fontData.underline=!e.fontData.underline,s(m.find(".mce-btn[aria-label='Underline']")))}l(e.fontData)}function s(e){e.toggleClass("mce-active")}function l(t){var n=m.find(".text-container"),a=m.find(".text");e.previewText&&t&&(a.css("fontFamily",t.font.family),a.css("fontSize",t.size),a.css("fontWeight",t.bold?"bold":"normal"),a.css("fontStyle",t.italic?"italic":"normal"),a.css("textDecoration",t.underline?"underline":"none"),a.css("color",t.forecolor),a.css("backgroundColor",t.backcolor),n.css("textAlign",t.align))}function c(t){return-1!==WIDGET_SETTINGS_UI_CONFIG.families.indexOf(t)?"standard":-1!==e.googleFontList.indexOf(t)?"google":"custom"}function u(){return e.fontData.font.url?e.fontData.font.url.split("/").pop().split(".")[0]:null}function d(t){var n=null,a=$.trim(e.fontData.font.url),i="font-family: "+t+"; src: url('"+a+"');";n=document.styleSheets[0],null!==n&&n.addRule("@font-face",i)}function p(e){e.addButton("aligntop",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-top.svg",tooltip:"Align Top",onclick:function(){e.execCommand("mceToggleVertical",!1,"top")}}),e.addButton("alignmiddle",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-vertical-middle.svg",tooltip:"Align Middle",onclick:function(){e.execCommand("mceToggleVertical",!1,"middle")
}}),e.addButton("alignbottom",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-bottom.svg",tooltip:"Align Bottom",onclick:function(){e.execCommand("mceToggleVertical",!1,"bottom")}}),e.addCommand("mceToggleVertical",function(){})}function f(e){switch(e){case"top":s(m.find(".mce-btn[aria-label='Align Top']"));break;case"middle":s(m.find(".mce-btn[aria-label='Align Middle']"));break;case"bottom":s(m.find(".mce-btn[aria-label='Align Bottom']"))}}var m=$(t),g=m.find(".custom-font"),h=m.find(".custom-font-size"),v=!0;e.googleFontList="",e.defaultFont={font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"24px",customSize:"",align:"left",verticalAlign:"middle",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"},a.getFonts().then(function(t){e.googleFontList=t}),e.customFontSize=null,e.applyCustomFont=function(){var t=u();null!==t&&(d(t),e.fontData.font.family=t,e.fontData.font.type="custom",l(e.fontData)),g.modal("hide")},e.applyCustomFontSize=function(){h.modal("hide"),null!==e.customFontSize&&e.customFontSize>=8&&e.customFontSize+"px"!==e.fontData.size&&(e.fontData.size=e.customFontSize+"px",-1!==WIDGET_SETTINGS_UI_CONFIG.sizes.indexOf(e.fontData.size)||e.fontData.customSize===e.fontData.size?n.tinymce.activeEditor.execCommand("FontSize",!1,e.fontData.size):(e.fontData.customSize=e.customFontSize+"px",e.tinymceOptions.fontsize_formats="Custom "+(""!==e.fontData.customSize?e.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes)),e.customFontSize=null},e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e};var b=e.$watchGroup(["fontData","googleFontList"],function(t){var n=null,a=t[0],o=t[1];a&&o&&(e.defaults(a,e.defaultFont),e.fontData.font.url&&(n=u(),null!==n&&d(n)),l(a),i(),b(),e.previewText&&e.$watch("fontData",l,!0))});e.$watch("tinymceOptions.fontsize_formats",function(t){"undefined"==typeof t||v||e.$broadcast("$tinymce:refresh")})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting").factory("googleFontLoader",["$http","angularLoad",function(e,t){var n="https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY",a="//fonts.googleapis.com/css?family=",i=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],o=",sans-serif;",r={};return r.getFonts=function(){return e.get(n,{cache:!0}).then(function(e){var n="",r="",s=!1;if(e.data&&e.data.items)for(var l=0;l<e.data.items.length;l++)n=e.data.items[l].family,-1===i.indexOf(n)&&(t.loadCSS(a+n).then(function(){}),/\s/.test(n)&&(s=!0),r+=s?n+"='"+n+"'"+o:n+"="+n+o);return r})},r}])}(),function(e){try{e=angular.module("risevision.widget.common.font-setting")}catch(t){e=angular.module("risevision.widget.common.font-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/font-setting/font-setting.html",'<div class="font-setting">\n  <div class="row">\n    <div class="col-md-12">\n      <div ng-class="{\'form-group\': !previewText}">\n        <textarea ui-tinymce="tinymceOptions" ng-model="tinymceModel" ng-if="tinymceOptions"></textarea>\n      </div>\n    </div>\n  </div>\n  <div class="row" ng-if="previewText">\n    <div class="col-md-12">\n      <div class="text-container form-group">\n        <span class="text">{{previewText}}</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Custom Font -->\n  <div class="custom-font modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontForm">\n          <div class="modal-body">\n            <url-field url="fontData.font.url" ng-model="customFont" init-empty></url-field>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFont()" ng-disabled="customFontForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Custom Font Size -->\n  <div class="custom-font-size modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font-size" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontSizeForm">\n          <div class="modal-body">\n            <div class="row">\n              <div class="col-md-3">\n                <div class="input-group">\n                  <input type="number" ng-model="customFontSize" class="form-control" />\n                  <span class="input-group-addon">{{\'common.units.pixels\' | translate}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFontSize()" ng-disabled="customFontSizeForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig",function(e,t,n,a,i,o){o=o||{};var r=0,s="ui-tinymce";return o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],link:function(l,c,u,d){function p(e){e?(f(),g&&g.getBody().setAttribute("contenteditable",!1)):(f(),g&&!g.settings.readonly&&g.getBody().setAttribute("contenteditable",!0))}function f(){g||(g=tinymce.get(u.id))}if(a.tinymce){var m,g,h=d[0],v=d[1]||null,b={},y=function(t){var n=t.getContent({format:b.format}).trim();n=i.trustAsHtml(n),h.$setViewValue(n),e.$$phase||l.$apply()};u.$set("id",s+"-"+r++),m={},angular.extend(m,l.$eval(u.uiTinymce));var $={setup:function(e){e.on("init",function(){h.$render(),h.$setPristine(),v&&v.$setPristine()}),e.on("ExecCommand",function(){e.save(),y(e)}),e.on("change NodeChange",function(){e.save(),y(e)}),e.on("blur",function(){c[0].blur()}),e.on("ObjectResized",function(){e.save(),y(e)}),e.on("remove",function(){c.remove()}),m.setup&&m.setup(e,{updateView:y})},format:m.format||"html",selector:"#"+u.id};angular.extend(b,o,m,$),n(function(){b.baseURL&&(tinymce.baseURL=b.baseURL),tinymce.init(b),p(l.$eval(u.ngDisabled))}),h.$formatters.unshift(function(e){return e?i.trustAsHtml(e):""}),h.$parsers.unshift(function(e){return e?i.getTrustedHtml(e):""}),h.$render=function(){f();var e=h.$viewValue?i.getTrustedHtml(h.$viewValue):"";g&&g.getDoc()&&(g.setContent(e),g.fire("change"))},u.$observe("disabled",p),l.$on("$tinymce:refresh",function(e,n){var a=u.id;if(angular.isUndefined(n)||n===a){var i=c.parent(),o=c.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,a),i.append(t(o)(l))}}),l.$on("$destroy",function(){f(),g&&(g.remove(),g=null)})}}}}]),"undefined"==typeof TEMPLATES)var TEMPLATES={};TEMPLATES["alignment.html"]='<div class="btn-group alignment">\n  <button type="button" class="btn btn-default btn-sm btn-alignment dropdown-toggle"\n    data-toggle="dropdown" data-wysihtml5-command-value="left">\n    <i class="fa fa-align-left"></i>\n    <span class="caret"></span>\n  </button>\n  <div class="dropdown-menu" role="menu">\n    <div class="btn-group">\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="left" tabindex="-1">\n        <i class="fa fa-align-left"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="center" tabindex="-1">\n        <i class="fa fa-align-center"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="right" tabindex="-1">\n        <i class="fa fa-align-right"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="justify" tabindex="-1">\n        <i class="fa fa-align-justify"></i>\n      </button>\n    </div>\n  </div>\n</div>\n',function(e,t,n,a){"use strict";function i(t,n){function i(){l.append(a["alignment.html"]),c=l.find(".btn-alignment"),r(n.align),l.find(".dropdown-menu button").on("click",function(){var t=e(this).data("wysihtml5-command-value");r(t),l.trigger("alignmentChanged",t)})}function o(){return c.data("wysihtml5-command-value")}function r(e){var t=l.find(".btn-alignment .fa"),n=t.attr("class").match(/fa-align-[a-z]+/g),a="fa-align-"+e;n&&n.length>0&&t.removeClass(n[0]),t.addClass(a),c.data("wysihtml5-command-value",e)}function s(){r(u)}var l=e(t),c=null,u="left";return n=e.extend({},{align:u},n),i(),{getAlignment:o,setAlignment:r,reset:s}}var o="alignment";e.fn.alignment=function(t){return this.each(function(){e.data(this,"plugin_"+o)||e.data(this,"plugin_"+o,new i(this,t))})}}(jQuery,window,document,TEMPLATES);var WIDGET_SETTINGS_UI_CONFIG={families:"Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;Webdings=webdings;Wingdings=wingdings,zapf dingbats;",sizes:"8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px"};!function(){"use strict";angular.module("risevision.widget.common.alignment",[]).directive("alignment",function(){return{restrict:"E",scope:{align:"="},transclude:!1,link:function(e,t){var n=$(t);e.$watch("align",function(e){e&&(n.data("plugin_alignment")?n.data("plugin_alignment").setAlignment(e):n.alignment({align:e}))}),n.on("alignmentChanged",function(t,n){e.$apply(function(){e.align=n})})}}})}(),function(){"use strict";angular.module("risevision.widget.common.column-setting",["risevision.common.i18n","risevision.widget.common.font-setting"]).directive("columnSetting",["$templateCache",function(e){return{restrict:"E",scope:{column:"=",expand:"="},template:e.get("_angular/column-setting/column-setting.html"),transclude:!1,link:function(e){var t={fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"18px",customSize:"",align:"left",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"},headerText:"",width:100,colorCondition:"none"};e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e},e.$watch("column.numeric",function(n){t.type="undefined"!=typeof n&&""!==n?n?"int":"string":"string",e.defaults(e.column,t)}),e.remove=function(){e.$parent.remove(e.column)}}}}])}(),function(e){try{e=angular.module("risevision.widget.common.column-setting")}catch(t){e=angular.module("risevision.widget.common.column-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/column-setting/column-setting.html",'<div class="panel panel-default">\n  <div class="collapse-panel panel-heading">\n    <a href="" ondragstart="return false;"\n    ng-class="{\'panel-heading\':true, collapsed:!collapse}" ng-click="collapse=!collapse">\n       {{column.name | translate}}\n    </a>\n    <a href="" ondragstart="return false;" class="fa fa-minus-circle fa-lg remove-column-button" ng-click="remove()"></a>\n  </div>\n  <div ng-class="{\'panel-collapse\':true, collapse:true, in:collapse}">\n    <div class="panel-body">\n\n      <!-- Numeric data column -->\n      <div class="checkbox">\n        <label>\n          <input type="checkbox" ng-model="column.numeric">{{\'column.numeric\' | translate}}\n        </label>\n        <span class="text-danger" style="float:right">\n          {{\'column.note\' | translate}}\n        </span>\n      </div>\n\n      <font-setting font-data="column.fontStyle">\n      </font-setting>\n\n      <div class="row">\n\n        <!-- Header Text -->\n        <div class="col-sm-6 col-xs-12">\n          <div class="form-group">\n            <label for="column-header-text">\n              {{\'column.header-text.label\' | translate}}\n            </label>\n            <input type="text" ng-model="column.headerText" class="form-control">\n          </div>\n        </div>\n\n        <!-- Width -->\n        <div class="col-sm-3 col-xs-12">\n          <div class="form-group">\n            <label for="column-width">\n              {{\'column.width\' | translate}}\n            </label>\n            <div class="input-group">\n              <input type="number" ng-model="column.width" class="form-control">\n              <span class="input-group-addon">{{\'common.units.pixels\' | translate}}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Color Conditions -->\n        <div class="col-sm-3 col-xs-12">\n          <div class="form-group">\n            <label for="column-color-condition">\n                {{\'column.color-condition.label\' | translate}}\n              </label>\n            <select class="form-control" ng-model="column.colorCondition"\n              ng-disabled="!column.numeric">\n              <option value="none">{{\'column.color-condition.none\' | translate}}</option>\n              <option value="change-up">{{\'column.color-condition.change-up\' | translate}}</option>\n              <option value="change-down">{{\'column.color-condition.change-down\' | translate}}</option>\n              <option value="value-positive">{{\'column.color-condition.value-positive\' | translate}}</option>\n              <option value="value-negative">{{\'column.color-condition.value-negative\' | translate}}</option>\n            </select>\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.column-selector",["risevision.widget.common.column-setting","risevision.common.i18n"]).directive("columnSelector",["$templateCache",function(e){return{restrict:"E",require:"?ngModel",scope:{columns:"=",columnNames:"="},template:e.get("_angular/column-selector/column-selector.html"),transclude:!1,link:function(e,t,n,a){function i(e,t){for(var n=0;n<e.length;n++)if(e[n].id===t){e.splice(n,1);break}}function o(){a&&a.$setValidity("required",e.columns.length)}function r(){for(var t=0;t<e.columns.length;t++)for(var n=0;n<e.columnNames.length;n++)e.columns[t].id===e.columnNames[n].id&&(e.columns[t].type=e.columnNames[n].type,e.columns[t].name=e.columnNames[n].name,e.columnNames[n].show=!0)}var s=e.$watch("columns",function(){e.columns&&e.columnNames&&(r(),o(),s())}),l=e.$watch("columnNames",function(t){e.columns&&t&&t.length>0&&(r(),l())});e.show=function(e){return!e.show},e.addColumn=function(){console.log(e.selectedColumn),e.add(e.selectedColumn),e.selectedColumn=null},e.add=function(t){t.show=!0,e.columns.push(t),o()},e.remove=function(t){if(t){i(e.columns,t.id);for(var n=0;n<e.columnNames.length;n++)if(t.id===e.columnNames[n].id){e.columnNames[n].show=!1;break}o()}}}}}])}(),function(e){try{e=angular.module("risevision.widget.common.column-selector")}catch(t){e=angular.module("risevision.widget.common.column-selector",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/column-selector/column-selector.html",'<div class="section">\n	<div class="row">\n		<div class="col-md-12">\n			<div class="form-group">\n				<label for="columns" class="control-label">{{\'column.select-title\' | translate}}</label>\n		    <select id="column-selector" class="form-control" ng-model="selectedColumn"\n				ng-options="column.name | translate for column in columnNames | filter:show track by column.id"\n				ng-change="addColumn()"></select>\n			</div>\n		</div>\n	</div>\n	<div class="row">\n		<div class="col-md-12">\n			<div class="panel-group">\n				<column-setting column="column" ng-repeat="column in columns"></column-setting>\n			</div>\n	</div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.scroll-setting",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("scrollSetting",["$templateCache",function(e){return{restrict:"E",scope:{scroll:"="},template:e.get("_angular/scroll-setting/scroll-setting.html"),transclude:!1,link:function(e){e.defaultSetting={by:"none",direction:"up",speed:"medium",pause:5,pud:10},e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e},e.$watch("scroll",function(t){e.defaults(t,e.defaultSetting)})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.scroll-setting")}catch(t){e=angular.module("risevision.widget.common.scroll-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/scroll-setting/scroll-setting.html",'<div class="row">\n  <div class="col-md-2">\n    <div class="form-group">\n      <label class="control-label">{{"scroll.heading" | translate}}</label>\n      <select id="scroll-by" ng-model="scroll.by" class="form-control">\n        <option value="none">{{\'scroll.by.none\' | translate}}</option>\n        <option value="continuous">{{\'scroll.by.continuous\' | translate}}</option>\n        <option value="page">{{\'scroll.by.page\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-2" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.direction.label" | translate}}</label>\n      <select id="scroll-direction" name="scroll-direction" ng-model="scroll.direction" class="form-control">\n        <option value="up">{{"transition.direction.up" | translate}}</option>\n        <option value="left">{{"transition.direction.left" | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-2" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.speed.label\' | translate}}</label>\n      <select id="scroll-speed" ng-model="scroll.speed" class="form-control">\n        <option value="slow">{{\'scroll.speed.slow\' | translate}}</option>\n        <option value="medium">{{\'scroll.speed.medium\' | translate}}</option>\n        <option value="fast">{{\'scroll.speed.fast\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-2" ng-show="scroll.by != \'none\' && scroll.direction == \'up\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pause.label\' | translate}}</label>\n      <div class="input-group">\n        <input id="scroll-pause" type="number" ng-model="scroll.pause" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-2" ng-show="scroll.by != \'none\' && scroll.direction == \'up\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pud.label\' | translate}}</label>\n      <span popover="{{\'scroll.pud.tooltip\' | translate}}" popover-trigger="click"\n        popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input id="scroll-pud" type="number" ng-model="scroll.pud" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),angular.module("risevision.widget.googleSpreadsheet.settings",["risevision.common.i18n","risevision.widget.common","risevision.widget.common.tooltip","risevision.widget.common.widget-button-toolbar","risevision.widget.common.column-selector","risevision.widget.common.font-setting","risevision.widget.common.scroll-setting","risevision.widget.common.google-drive-picker","risevision.widget.common.visualization","colorpicker.module"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(e,t,n,a){e.settings={params:{},additionalParams:{}},e.alerts=[],e.getAdditionalParam=function(t,n){var a=e.settings.additionalParams[t];return angular.isUndefined(a)?n:a},e.setAdditionalParam=function(t,n){e.settings.additionalParams[t]=n},e.loadAdditionalParams=function(){n.getAdditionalParams().then(function(t){e.settings.additionalParams=t,e.$broadcast("loadAdditionalParams",t)},function(e){alert(e)})},e.setAdditionalParams=function(t,n){e.settings.additionalParams[t]=n},e.saveSettings=function(){e.alerts=[],e.$broadcast("collectAdditionalParams"),t.saveSettings(e.settings).then(function(){},function(t){e.alerts=t.alerts})},e.closeSettings=function(){a.closeSettings().then(function(){},function(t){e.alerts=t.alerts})},e.settings.params=n.getParams(),e.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(e,t){e.$watchCollection("alerts",function(e,n){e.length>0&&0===n.length&&$("body").animate({scrollTop:t.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(e,t,n){var a={getStorageUrlData:function(e){function a(e){return-1!==e.indexOf(t)?"file":-1!==e.indexOf(n)?"folder":null}function i(e){var t=e.split("risemedialibrary-");return t[1].slice(0,t[1].indexOf("/"))}var o,r,s,l,c={};if("file"===a(e))o=e.split(t)[1],o=decodeURIComponent(o.slice(o.indexOf("/")+1)),r=o.split("/"),c.companyId=i(e),c.fileName=r.pop(),c.folder=r.length>0?r.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(e)){s=e.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(e),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(e){return e.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(e,t){function n(){for(var e="",n="",a="",o=[],r=!1,s=",sans-serif;",l="//fonts.googleapis.com/css?family=",c=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],u=0;u<i.length;u++)e=i[u],-1===c.indexOf(e)&&(a=l+e,t.loadCSS(a),o.push(a),/\s/.test(e)&&(r=!0),n+=r?e+"='"+e+"'"+s:e+"="+e+s);return{fonts:n,urls:o}}var a={},i=[];return a.getGoogleFonts=function(){return 0===i.length?e.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(e){var t=null;if(e.data&&e.data.items){for(var a=0,o=e.data.items.length;o>a;a++)t=e.data.items[a],t.subsets&&1===t.subsets.length&&"khmer"===t.subsets[0].toLowerCase()||i.push(t.family);return n()}}):n()},a.getFontsUsed=function(e){var t=[];return angular.forEach(i,function(n){-1!==e.indexOf(n)&&t.push(n)}),t},a}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(e,t){var n=t.defer();e.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(e.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(e){var t={isImage:function(t){var n=e.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=t,n.promise}};return t}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(e,t,n,a){function i(e){var t=angular.copy(e);return delete t.params.id,delete t.params.companyId,delete t.params.rsW,delete t.params.rsH,t}this.saveSettings=function(o,r){var s=e.defer(),l=[],c="";o=i(o),r&&(l=r(o)),l.length>0&&(t.debug("Validation failed.",l),s.reject({alerts:l})),o.params.hasOwnProperty("layoutURL")&&(c+=o.params.layoutURL+"?",delete o.params.layoutURL),c+=a.encodeParams(o.params);var u=a.encodeAdditionalParams(o.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(e){t.debug("encoded settings",JSON.stringify(e)),t.debug("Settings saved. ",o),s.resolve(e)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(e,t,n,a,i,o){this.getAdditionalParams=function(){var i=e.defer(),r=o.additionalParams||{};return t.rpc.call("","rscmd_getAdditionalParams",function(e){e=e?a.parseAdditionalParams(e):{},n.debug("getAdditionalParams returns ",e),i.resolve($.extend(!0,r,e))}),i.promise},this.getParams=function(){var e=o.params||{};return angular.extend(e,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function e(e){return 0===e.indexOf("up_")?e.slice(3):null}this.parseAdditionalParams=function(e){return e?JSON.parse(e):{}},this.encodeAdditionalParams=function(e){return JSON.stringify(e)},this.encodeParams=function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a;a="object"==typeof e[n]?JSON.stringify(e[n]):e[n],t.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return t.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var n={},a=t.split("&"),i=0;i<a.length;i++){var o=a[i].split("="),r=e(decodeURIComponent(o[0]));if(r)try{n[r]=JSON.parse(decodeURIComponent(o[1]))}catch(s){n[r]=decodeURIComponent(o[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(e){"use strict";e.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(e,t){var n,a=e.defer(),i={get:function(){return n||(n=a.promise,t.google.visualization?a.resolve(t.google.visualization):t.google.setOnLoadCallback(function(){a.resolve(t.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.googleSpreadsheet.settings").controller("spreadsheetSettingsController",["$scope","$window","$log","googleSheet","columns",function(e,t,n,a,i){function o(t){a.getWorkSheets(t).then(function(t){n.debug("Worksheets",t),e.published=!0,e.sheets=t,e.currentSheet=t[e.settings.additionalParams.spreadsheet.tabId-1]}).then(null,function(){e.published=!1,e.sheets=[],e.currentSheet=null,e.settings.additionalParams.spreadsheet.tabId=1})}e.showPreview=!1,e.sheets=[],e.currentSheet=null,e.columns=[],e.getColumns=function(t){i.getColumns(t).then(function(t){t.length>0&&(e.columns=t)}).then(null,n.error)},e.$watch("currentSheet",function(t){t&&(e.settings.additionalParams.spreadsheet.tabId=t.value)}),e.published=!0,e.$watch("settings.additionalParams.spreadsheet.fileId",function(t){"undefined"!=typeof t&&t?(e.showPreview=!0,e.settingsForm.$setValidity("fileId",!0),"key"===e.settings.additionalParams.spreadsheet.selection&&(e.settings.additionalParams.spreadsheet.url="https://docs.google.com/spreadsheets/d/"+t+"/edit#gid=0"),o(t)):e.settingsForm.$setValidity("fileId",!1)}),e.$watch("settings.additionalParams.spreadsheet.url",function(t,n){"undefined"!=typeof t&&t!==n&&(e.columns=[],"undefined"!=typeof n&&""!==n&&(e.settings.additionalParams.format.columns=[]),""!==t&&e.getColumns(t))}),e.$watch("published",function(t){"undefined"!=typeof t&&e.settings.additionalParams.spreadsheet&&e.settings.additionalParams.spreadsheet.fileId&&""!==e.settings.additionalParams.spreadsheet.fileId&&e.settingsForm.$setValidity("fileId",t)}),e.$on("picked",function(t,n){e.showPreview=!0,e.settings.additionalParams.spreadsheet.selection="drive",e.settings.additionalParams.spreadsheet.docName=n[0].name,e.settings.additionalParams.spreadsheet.url=encodeURI(n[0].url),e.settings.additionalParams.spreadsheet.fileId=n[0].id}),e.setSelection=function(){e.showPreview=!0,e.settings.additionalParams.spreadsheet.selection="key"},e.previewFile=function(){t.open(e.settings.additionalParams.spreadsheet.url,"_blank")},e.retryFile=function(){e.settings.additionalParams.spreadsheet.fileId&&""!==e.settings.additionalParams.spreadsheet.fileId&&(e.published=!0,o(e.settings.additionalParams.spreadsheet.fileId))},e.clearSelection=function(){e.published=!0,"drive"===e.settings.additionalParams.spreadsheet.selection&&(e.settings.additionalParams.spreadsheet.docName=""),e.settings.additionalParams.spreadsheet.url="",e.settings.additionalParams.spreadsheet.fileId=""}}]).value("defaultSettings",{params:{},additionalParams:{format:{body:{fontStyle:{font:{family:"tahoma,arial,helvetica,sans-serif",type:"standard",url:""},size:"18px",customSize:"",align:"left",verticalAlign:"middle",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},columns:[],evenRowColor:"",header:{fontStyle:{font:{family:"tahoma,arial,helvetica,sans-serif",type:"standard",url:""},size:"18px",customSize:"",align:"left",verticalAlign:"middle",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},oddRowColor:"",rowHeight:50,separator:{color:"rgba(238,238,238, 1)",showColumn:!0,showRow:!0}},scroll:{},spreadsheet:{selection:"drive",docName:"",url:"",fileId:"",cells:"sheet",range:{startCell:"",endCell:""},tabId:1,hasHeader:!1,refresh:5}}}),angular.module("risevision.widget.googleSpreadsheet.settings").constant("SPREADSHEET_API_WORKSHEETS","https://spreadsheets.google.com/feeds/worksheets/").constant("SPREADSHEET_API_SUFFIX","/public/basic").factory("googleSheet",["$http","$log","SPREADSHEET_API_WORKSHEETS","SPREADSHEET_API_SUFFIX",function(e,t,n,a){var i={},o=function(e){var t,n;return n=e.feed.entry.map(function(e,n){return t={},t.label=e.title.$t,t.value=n+1,t})};return i.getWorkSheets=function(t){var i=n+t+a;return e.get(encodeURI(i+"?alt=json")).then(function(e){return e.data}).then(function(e){return o(e)})},i}]),function(){"use strict";angular.module("risevision.widget.googleSpreadsheet.settings").factory("columns",["visualizationApi","$q",function(e,t){function n(e){var t,n,a,i,o,r=e.getDataTable(),s=[],l=[];for(i=0;i<r.getNumberOfColumns();i++)for(o=0;o<r.getNumberOfRows();o++)if(t=r.getValue(o,i),t&&""!==t){l.push(i);
break}for(i=0;i<l.length;i++)n=r.getColumnLabel(l[i]),""===n&&(n=r.getColumnId(l[i])),a=r.getColumnId(l[i])+"_"+r.getColumnType(l[i])+"_"+n,s.push({id:a,name:n,type:r.getColumnType(l[i])});return s}var a={};return a.getColumns=function(a){var i=t.defer();return e.get().then(function(e){var t=new e.Query(a);t.setQuery("select * limit 1"),t.setTimeout(30),t.send(function(e){e?e.isError()?i.reject(e.getMessage()):i.resolve(n(e)):i.reject("No response")})}),i.promise},a}])}();
//# sourceMappingURL=data:application/json;base64,
